{"title":"【Coding Mind】Rob Pike 的 5个编程原则","date":"2020-09-28T16:27:33.000Z","date_formatted":{"ll":"Sep 29, 2020","L":"09/29/2020","MM-DD":"09-29"},"link":"2020/09/29/2020-09-29-02","comments":true,"tags":["coding"],"updated":"2020-09-28T16:35:58.132Z","content":"<h2 id=\"rob-pike-的-5个编程原则\">Rob Pike 的 5个编程原则<a title=\"#rob-pike-的-5个编程原则\" href=\"#rob-pike-的-5个编程原则\"></a></h2>\n<hr>\n<p><strong>原则1：</strong></p>\n<p>你没有办法预测每个程序的运行时间，瓶颈会出现在出乎意料的地方，所以在分析瓶颈原因之前，先不要盲目猜测</p>\n<p><strong>原则2：</strong></p>\n<p>在测试之前不要优化程序，即使在测试之后也要慎重，除非一部分代码占据绝对比重的运行时间</p>\n<p><strong>原则3：</strong></p>\n<p>花哨的算法在 n 比较小时效率通常比较糟糕，而 n 通常是比较小的，并且这些算法有一个很大的常数。除非你确定 n 在变大，否则不要用花哨的算法（即便 n 不变大，也要先遵循第 2 个原则）</p>\n<p><strong>原则4：</strong></p>\n<p>相对于朴素的算法来说，花哨的算法更容易出现Bug，更难调试。尽量使用朴素的算法和数据结构</p>\n<p><strong>原则5：</strong></p>\n<p>如果你选择了正确的数据结构，并且已把事情组织好，那么算法的效率显而易见。编程的核心是数据结构是，不是算法</p>\n<hr>\n<p>原则1&amp;2 -&gt; <strong>过早的优化是万恶的根源</strong> (Tony Hoare)</p>\n<p>原则3&amp;4 -&gt; <strong>当遇到麻烦时，试试最简单粗暴的办法</strong> (Ken Thompson)</p>\n<p>原则5 -&gt; <strong>用最佳结构，写简单代码</strong> (人月神话)</p>\n","next":{"title":"【go】反射","link":"2020/09/28/2020-09-29-01"},"plink":"https://terence.segofun.com/2020/09/29/2020-09-29-02/","toc":[{"id":"rob-pike-的-5个编程原则","title":"Rob Pike 的 5个编程原则","index":"1"}]}