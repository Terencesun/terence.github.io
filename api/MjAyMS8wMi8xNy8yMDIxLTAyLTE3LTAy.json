{"title":"【Go语言核心36讲】1. 工作区和GoPath","date":"2021-02-17T08:41:32.000Z","date_formatted":{"ll":"Feb 17, 2021","L":"02/17/2021","MM-DD":"02-17"},"link":"2021/02/17/2021-02-17-02","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-02-17T15:39:36.853Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>几个概念(后边1.13引入go module之后，这几个概念会变得模糊，需要注意)</li>\n</ol>\n<ul>\n<li>GOROOT：Go 语言安装根目录的路径，也就是 GO 语言的安装路径</li>\n<li>GOPATH：若干工作区目录的路径。是我们自己定义的工作空间</li>\n<li>GOBIN：GO 程序生成的可执行文件（executable file）的路径</li>\n</ul>\n<ol start=\"2\">\n<li>Go语言源码的组织方式<br>\nGo源码的组织方式就是以缓解变量GOPATH、工作区、src目录和代码包为主线的<br>\n一般情况下，Go 语言的源码文件都需要被存放在环境变量 GOPATH 包含的某个工作区（目录）中的 src 目录下的某个代码包（目录）中</li>\n</ol>\n<p>(PS: 这里要说明下，由于这种源码组织方式对于包的管理极其混乱，后边引入Go Module之后，可以根据.mod文件进行包管理，代码文件的组织更为灵活，可以不使用src作为工作目录)</p>\n<ol start=\"3\">\n<li>\n<p>Go的库源码安装之后会产生一个.a的文件，这个是编译产生的，类似缓存，帮助构建加速，存放在GoPath的pkg文件夹中，按照不同系统平台进行存放</p>\n</li>\n<li>\n<p>.a文件就是静态库文件，编译好的库文件，go是可以直接用的，这样做的目的，就是有一些项目不想开源，就可以使用这种办法</p>\n</li>\n<li>\n<p>关于.a文件的使用，可以参考：<a href=\"http://reborncodinglife.com/2018/04/27/how-to-create-static-lib-in-golang/\">http://reborncodinglife.com/2018/04/27/how-to-create-static-lib-in-golang/</a></p>\n</li>\n<li>\n<p>go build相关参数</p>\n</li>\n</ol>\n<ul>\n<li>-a 强制编译，就是不适用缓存，全部重新编译</li>\n<li>-i  编译依赖的代码库，还需要安装他们的归档文件(.a文件)</li>\n<li>-x 打印全部过程</li>\n<li>-n 打印全部过程，但不执行这些，就是为了看看go build执行了什么</li>\n<li>-v  打印编译的时候代码包的名称</li>\n</ul>\n<ol start=\"7\">\n<li>go get 相关命令</li>\n</ol>\n<ul>\n<li>-u：下载并安装代码包，不论工作区中是否已存在它们</li>\n<li>-d：只下载代码包，不安装代码包</li>\n<li>-fix：在下载代码包后先运行一个用于根据当前 Go 语言版本修正代码的工具，然后再安装代码包</li>\n<li>-t：同时下载测试所需的代码包</li>\n<li>-insecure：允许通过非安全的网络协议下载和安装代码包。HTTP 就是这样的协议。</li>\n</ul>\n","prev":{"title":"【Go语言核心36讲】2. 命令源码文件","link":"2021/02/17/2021-02-17-03"},"next":{"title":"【566】重塑矩阵","link":"2021/02/17/2021-02-17-01"},"plink":"https://terence.segofun.com/2021/02/17/2021-02-17-02/"}