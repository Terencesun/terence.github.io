{"title":"【go】go内置的json解析","date":"2020-09-30T14:42:16.000Z","date_formatted":{"ll":"Sep 30, 2020","L":"09/30/2020","MM-DD":"09-30"},"link":"2020/09/30/2020-09-30-01","comments":true,"tags":["golang","language"],"updated":"2020-09-30T15:05:51.666Z","content":"<h2 id=\"go内置的json解析\">go内置的json解析<a title=\"#go内置的json解析\" href=\"#go内置的json解析\"></a></h2>\n<hr>\n<p>直接上代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package json_test</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;encoding&#x2F;json&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tAge int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Student2 struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tAge int &#96;json:&quot;test&quot;&#96;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestJson(t *testing.T)  &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 对于结构体转为json字符串</span><br><span class=\"line\">\tvar std1 *Student &#x3D; &amp;Student&#123;</span><br><span class=\"line\">\t\tName: &quot;terence&quot;,</span><br><span class=\"line\">\t\tAge: 18,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar std2 *Student2 &#x3D; &amp;Student2&#123;</span><br><span class=\"line\">\t\tName: &quot;TERENCE&quot;,</span><br><span class=\"line\">\t\tAge: 20,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif jsonByte, err :&#x3D; json.Marshal(std1); err &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(jsonByte)</span><br><span class=\"line\">\t\tfmt.Println(string(jsonByte))</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F; std2 中的Age，用了别名，而std1中，未使用别名</span><br><span class=\"line\">\tif jsonByte2, err2 :&#x3D; json.Marshal(std2); err2 &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(jsonByte2)</span><br><span class=\"line\">\t\tfmt.Println(string(jsonByte2))</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tfmt.Println(err2)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; json字符串反序列化</span><br><span class=\"line\">\tvar std3 *Student</span><br><span class=\"line\">\tjsonByte3, _ :&#x3D; json.Marshal(std1)</span><br><span class=\"line\">\terr3 :&#x3D; json.Unmarshal(jsonByte3, &amp;std3)</span><br><span class=\"line\">\tif err3 !&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(err3)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(std3.Name)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; map的json序列化和反序列化</span><br><span class=\"line\">\tvar std5 map[string]Student</span><br><span class=\"line\">\tstd5 &#x3D; make(map[string]Student)</span><br><span class=\"line\">\tfor i:&#x3D;1; i&lt;5; i++ &#123;</span><br><span class=\"line\">\t\tname :&#x3D; fmt.Sprintf(&quot;test%v&quot;, i)</span><br><span class=\"line\">\t\ttemp :&#x3D; &amp;Student&#123;</span><br><span class=\"line\">\t\t\tName: name,</span><br><span class=\"line\">\t\t\tAge: i,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstd5[name] &#x3D; *temp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar jsonString4 string</span><br><span class=\"line\">\tif jsonByte4, err4 :&#x3D; json.Marshal(std5); err4 &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(jsonByte4)</span><br><span class=\"line\">\t\tfmt.Println(string(jsonByte4))</span><br><span class=\"line\">\t\tjsonString4 &#x3D; string(jsonByte4)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tfmt.Println(err4)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F; 反序列化</span><br><span class=\"line\">\tvar std6 map[string]Student &#x3D; make(map[string]Student)</span><br><span class=\"line\">\terr5 :&#x3D; json.Unmarshal([]byte(jsonString4), &amp;std6)</span><br><span class=\"line\">\tif err5 !&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(err5)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(std6)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 数组同理</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","prev":{"title":"【go】Goroutine的GPM模型","link":"2020/10/07/2020-10-07-01"},"next":{"title":"【go】一个简单的负载均衡的框架实现","link":"2020/09/29/2020-09-29-03"},"plink":"https://terence.segofun.com/2020/09/30/2020-09-30-01/","toc":[{"id":"go内置的json解析","title":"go内置的json解析","index":"1"}]}