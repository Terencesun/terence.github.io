{"title":"【go】反射","date":"2020-09-28T14:57:22.000Z","date_formatted":{"ll":"Sep 28, 2020","L":"09/28/2020","MM-DD":"09-28"},"link":"2020/09/28/2020-09-29-01","comments":true,"tags":["golang","language"],"updated":"2020-09-28T16:35:05.263Z","content":"<h2 id=\"【go学习】反射\">【go学习】反射<a title=\"#【go学习】反射\" href=\"#【go学习】反射\"></a></h2>\n<hr>\n<h3 id=\"1.-反射是什么？它的目的是什么？有什么用？\"><strong>1. 反射是什么？它的目的是什么？有什么用？</strong><a title=\"#1.-反射是什么？它的目的是什么？有什么用？\" href=\"#1.-反射是什么？它的目的是什么？有什么用？\"></a></h3>\n<p>a) 可以在运行时动态获取变量的相关信息</p>\n<p>b) 反射在计算机的概念里是指一段程序审查自身结构的能力，主要通过类型进行审查。它是元编程的一种形式，同样也是引起混乱的重大来源</p>\n<p>c) 反射常用应用场景：</p>\n<ul>\n<li>有时你需要编写一个函数，但是并不知道传给你的参数类型是什么，可能是没约定好；也可能是传入的类型很多，这些类型并不能统一表示。这时反射就会用的上了</li>\n<li>有时候需要根据某些条件决定调用哪个函数，比如根据用户的输入来决定。这时就需要对函数和函数的参数进行反射，在运行期间动态地执行函数</li>\n</ul>\n<p>d) 反射的缺点：</p>\n<ul>\n<li>使用反射的代码，阅读性差</li>\n<li>对于编译型语言，一般都在编译时就知道类型错误，但是如果使用了反射，那么编译的时候就不会发现错误，会导致程序跑了很久之后才会panic</li>\n<li>反射对性能影响还是比较大的，比正常代码运行速度慢一到两个数量级，对于一个项目中处于运行效率关键位置的代码，尽量避免使用反射特性</li>\n</ul>\n<h3 id=\"2.-go语言中的反射常用的方法是什么？\"><strong>2. go语言中的反射常用的方法是什么？</strong><a title=\"#2.-go语言中的反射常用的方法是什么？\" href=\"#2.-go语言中的反射常用的方法是什么？\"></a></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reflect.TypeOf()    &#x2F;&#x2F; 获取变量的类型，返回reflect.Type类型</span><br><span class=\"line\">reflect.ValueOf()    &#x2F;&#x2F; 获取变量的值，返回reflect.Value类型</span><br><span class=\"line\">reflect.Value.Kind()    &#x2F;&#x2F; 获取变量的类别，返回一个常量</span><br><span class=\"line\">reflect.Value.Interface()    &#x2F;&#x2F; 转换为interface&#123;&#125;类型</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 例子</span><br><span class=\"line\">package reflect_test</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type car struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tprice int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestReflect1(t *testing.T)  &#123;</span><br><span class=\"line\">\tBus :&#x3D; new(car)</span><br><span class=\"line\">\tr1 :&#x3D; reflect.TypeOf(*Bus)</span><br><span class=\"line\">\tr2 :&#x3D; reflect.ValueOf(*Bus)</span><br><span class=\"line\">\t&#x2F;&#x2F; r1 是具体的类型，比如这里，就是car这个类型</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; %v\\n&quot;, r1)</span><br><span class=\"line\">\t&#x2F;&#x2F; r2 是这个结构的值，现在都是默认值</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; %v\\n&quot;, r2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; reflect.Type表示interface&#123;&#125;的具体类型 &lt;- 通过TypeOf()获得</span><br><span class=\"line\">&#x2F;&#x2F; reflect.Value表示具体数值 &lt;- 通过ValueOf()获得</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; TypeOf() 产生 Type类型，这个时候Type类型有一个方法Kind()</span><br><span class=\"line\">&#x2F;&#x2F; ValueOf() 产生 Value类型，这个时候Value类型有一个方法Kind()</span><br><span class=\"line\">&#x2F;&#x2F; Kind() -&gt; 返回的是Type类型的特定类别，比如struct</span><br><span class=\"line\">&#x2F;&#x2F; Type -&gt; 返回的是interface&#123;&#125;的实际类型</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 例子</span><br><span class=\"line\">package reflect_test</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type car struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tprice int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestReflect1(t *testing.T)  &#123;</span><br><span class=\"line\">\tBus :&#x3D; new(car)</span><br><span class=\"line\">\tr1 :&#x3D; reflect.TypeOf(*Bus)</span><br><span class=\"line\">\tr2 :&#x3D; reflect.ValueOf(*Bus)</span><br><span class=\"line\">\t&#x2F;&#x2F; Kind() 表示当前这个结构的类型的特定类型</span><br><span class=\"line\">\t&#x2F;&#x2F; 比如下面r1和r2虽然一个是type一个value，但是其本源就是一个struct结构体类型，基础类型，如果基础类型是个int，那么这里会显示int</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; Kind() -&gt; %v\\n&quot;, r1.Kind())</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; Kind() -&gt; %v\\n&quot;, r2.Kind())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; NumField()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 例子</span><br><span class=\"line\">package reflect1_test</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type car struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tprice int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestReflect1(t *testing.T)  &#123;</span><br><span class=\"line\">\tBus :&#x3D; new(car)</span><br><span class=\"line\">\tr1 :&#x3D; reflect.TypeOf(*Bus)</span><br><span class=\"line\">\tr2 :&#x3D; reflect.ValueOf(*Bus)</span><br><span class=\"line\">\t&#x2F;&#x2F; NumField() 表示本源中含有几个字段</span><br><span class=\"line\">\t&#x2F;&#x2F; r1和r2虽然类型不一样，一个是type，一个是value，但是反射的本源都是一个结构体</span><br><span class=\"line\">\t&#x2F;&#x2F; 所以这个结构体就两个字段</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; NumField() -&gt; %v\\n&quot;, r1.NumField())</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; NumField() -&gt; %v\\n&quot;, r2.NumField())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Field()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 例子</span><br><span class=\"line\">package reflect1_test</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type car struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tprice int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestReflect1(t *testing.T)  &#123;</span><br><span class=\"line\">\tBus :&#x3D; new(car)</span><br><span class=\"line\">\tr1 :&#x3D; reflect.TypeOf(*Bus)</span><br><span class=\"line\">\tr2 :&#x3D; reflect.ValueOf(*Bus)</span><br><span class=\"line\">\t&#x2F;&#x2F; Field()</span><br><span class=\"line\">\t&#x2F;&#x2F; 对于Type类型的，每一个Field都表示详细的本源结构体的构造情况，可以想像一个数组，存的是结构体字段的详细定义</span><br><span class=\"line\">\t&#x2F;&#x2F; 对于Value类型的，每一个Field都表示具体的值，可以想像一个数组，存的是值</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; Field() -&gt; %v\\n&quot;, r1.Field(1))</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; Field() -&gt; %v\\n&quot;, r2.Field(1))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Value类型的方法</span><br><span class=\"line\">&#x2F;&#x2F; Int()和String()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 例子</span><br><span class=\"line\">package reflect1_test</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type car struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tprice int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestReflect1(t *testing.T)  &#123;</span><br><span class=\"line\">\tBus :&#x3D; new(car)</span><br><span class=\"line\">\tr1 :&#x3D; reflect.TypeOf(*Bus)</span><br><span class=\"line\">\tr2 :&#x3D; reflect.ValueOf(*Bus)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 对于intxxx类型的，通过Int()转换为int64类型的</span><br><span class=\"line\">\t&#x2F;&#x2F; 必须是反射中Value类型，Type类型没有</span><br><span class=\"line\">\t&#x2F;&#x2F; 同样，intxxx类型的，通过String()可以转为string类型</span><br><span class=\"line\">\t&#x2F;&#x2F; String()不光是用于int这种，也可以是自定义的结构体，这里String转换后，其value是Value类型的名字</span><br><span class=\"line\">\tvar a int16 &#x3D; 11</span><br><span class=\"line\">\tr3 :&#x3D; reflect.ValueOf(a)</span><br><span class=\"line\">\t&#x2F;&#x2F; Int()</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; Int() -&gt; type: %T -&gt; value: %v\\n&quot;, r3.Int(), r3.Int())</span><br><span class=\"line\">\t&#x2F;&#x2F; String()</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; String() -&gt; type: %T -&gt; value: %v\\n&quot;, r3.String(), r3.String())</span><br><span class=\"line\">\t&#x2F;&#x2F; bus结构体也可以用String,但不能用Int</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; String() -&gt; type: %T -&gt; value: %v\\n&quot;, r2.String(), r2.String())</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3.-完整的例子\"><strong>3. 完整的例子</strong><a title=\"#3.-完整的例子\" href=\"#3.-完整的例子\"></a></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package reflect1_test</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">\t&quot;testing&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type car struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tprice int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func TestReflect1(t *testing.T)  &#123;</span><br><span class=\"line\">\tBus :&#x3D; new(car)</span><br><span class=\"line\">\tr1 :&#x3D; reflect.TypeOf(*Bus)</span><br><span class=\"line\">\tr2 :&#x3D; reflect.ValueOf(*Bus)</span><br><span class=\"line\">\t&#x2F;&#x2F; r1 是具体的类型，比如这里，就是car这个类型，这里是一个叫做Type的类型，是一个结构</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; %v\\n&quot;, r1)</span><br><span class=\"line\">\t&#x2F;&#x2F; r2 是这个结构的值的类型，现在都是默认值，这里是一个叫做Value的类型，是一个结构</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; %v\\n&quot;, r2)</span><br><span class=\"line\">\t&#x2F;&#x2F; Kind() 表示当前这个结构的类型</span><br><span class=\"line\">\t&#x2F;&#x2F; 比如下面r1和r2虽然一个是type一个value，但是其本源就是一个struct结构体类型，基础类型，如果基础类型是个int，那么这里会显示int</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; Kind() -&gt; %v\\n&quot;, r1.Kind())</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; Kind() -&gt; %v\\n&quot;, r2.Kind())</span><br><span class=\"line\">\t&#x2F;&#x2F; NumField() 表示本源中含有几个字段</span><br><span class=\"line\">\t&#x2F;&#x2F; r1和r2虽然类型不一样，一个是type，一个是value，但是反射的本源都是一个结构体</span><br><span class=\"line\">\t&#x2F;&#x2F; 所以这个结构体就两个字段</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; NumField() -&gt; %v\\n&quot;, r1.NumField())</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; NumField() -&gt; %v\\n&quot;, r2.NumField())</span><br><span class=\"line\">\t&#x2F;&#x2F; Field()</span><br><span class=\"line\">\t&#x2F;&#x2F; 对于Type类型的，每一个Field都表示详细的本源结构体的构造情况，可以想像一个数组，存的是结构体字段的详细定义</span><br><span class=\"line\">\t&#x2F;&#x2F; 对于Value类型的，每一个Field都表示具体的值，可以想像一个数组，存的是值</span><br><span class=\"line\">\tfmt.Printf(&quot;Typeof -&gt; Field() -&gt; %v\\n&quot;, r1.Field(1))</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; Field() -&gt; %v\\n&quot;, r2.Field(1))</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 对于intxxx类型的，通过Int()转换为int64类型的</span><br><span class=\"line\">\t&#x2F;&#x2F; 必须是反射中Value类型，Type类型没有</span><br><span class=\"line\">\t&#x2F;&#x2F; 同样，intxxx类型的，通过String()可以转为string类型</span><br><span class=\"line\">\t&#x2F;&#x2F; String()不光是用于int这种，也可以是自定义的结构体，这里String转换后，其value是Value类型的名字</span><br><span class=\"line\">\tvar a int16 &#x3D; 11</span><br><span class=\"line\">\tr3 :&#x3D; reflect.ValueOf(a)</span><br><span class=\"line\">\t&#x2F;&#x2F; Int()</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; Int() -&gt; type: %T -&gt; value: %v\\n&quot;, r3.Int(), r3.Int())</span><br><span class=\"line\">\t&#x2F;&#x2F; String()</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; String() -&gt; type: %T -&gt; value: %v\\n&quot;, r3.String(), r3.String())</span><br><span class=\"line\">\t&#x2F;&#x2F; bus结构体也可以用String,但不能用Int</span><br><span class=\"line\">\tfmt.Printf(&quot;Valueof -&gt; String() -&gt; type: %T -&gt; value: %v\\n&quot;, r2.String(), r2.String())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.-我们什么时候用反射？\"><strong>4. 我们什么时候用反射？</strong><a title=\"#4.-我们什么时候用反射？\" href=\"#4.-我们什么时候用反射？\"></a></h3>\n<blockquote>\n<p>清晰优于聪明。而反射并不是一目了然的<br>\n—— Rob Pike</p>\n</blockquote>\n<p>不到特别需要使用的时候，不要使用反射</p>\n<p>反射的三个定律：<br>\n<strong>1. 反射将接口变量转换成反射对象 Type 和 Value (Reflection goes from interface value to reflection object)</strong><br>\n<strong>2. 反射可以通过反射对象 Value 还原成原先的接口变量 (Reflection goes from reflection object to interface value.)</strong><br>\n<strong>3. 反射可以用来修改一个变量的值，前提是这个值可以被修改 (To modify a reflection object, the value must be settable.)</strong></p>\n<h3 id=\"5.-参考\"><strong>5. 参考</strong><a title=\"#5.-参考\" href=\"#5.-参考\"></a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/laws-of-reflection\" target=\"_blank\">The Laws of Reflection</a></li>\n<li><a href=\"https://studygolang.com/articles/13178\" target=\"_blank\">Go 系列教程 —— 34. 反射</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTA4Njc0OQ==&amp;mid=2651436469&amp;idx=1&amp;sn=a89a587e7bc5f3b43c0f97273d85b858&amp;chksm=80bb6b47b7cce251e4dc2f5b12cb60cb70879e610a22e7ad57f08f05755f31920db6de956d6c&amp;scene=27#wechat_redirect&amp;cpage=431\" target=\"_blank\">深度解密Go语言之反射</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTA4Njc0OQ==&amp;mid=2651440074&amp;idx=5&amp;sn=25967a4c1dc5a3533f215b4f3f1b0609&amp;chksm=80bb1d38b7cc942ea29df890f466efb272485cbe2c2791633c0e3d423c03a9109d34228fefe8&amp;scene=27#wechat_redirect&amp;cpage=40\" target=\"_blank\">2020重学Go系列：36. 图解：通俗易懂解释反射三大定律</a></li>\n</ul>\n","prev":{"title":"【Coding Mind】Rob Pike 的 5个编程原则","link":"2020/09/29/2020-09-29-02"},"next":{"title":"【数据库】MySQL 数据库 update A set num=num+ ？ where id=？并发执行情况下存在线程安全问题吗？","link":"2020/09/22/2020-09-22-01"},"plink":"https://terence.segofun.com/2020/09/28/2020-09-29-01/","toc":[{"id":"【go学习】反射","title":"【go学习】反射","index":"1","children":[{"id":"1.-反射是什么？它的目的是什么？有什么用？","title":"1. 反射是什么？它的目的是什么？有什么用？","index":"1.1"},{"id":"2.-go语言中的反射常用的方法是什么？","title":"2. go语言中的反射常用的方法是什么？","index":"1.2"},{"id":"3.-完整的例子","title":"3. 完整的例子","index":"1.3"},{"id":"4.-我们什么时候用反射？","title":"4. 我们什么时候用反射？","index":"1.4"},{"id":"5.-参考","title":"5. 参考","index":"1.5"}]}]}