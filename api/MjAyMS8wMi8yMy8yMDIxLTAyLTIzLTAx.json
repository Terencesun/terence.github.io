{"title":"【Go语言核心36讲】33. 临时对象池sync.Pool","date":"2021-02-23T02:36:27.000Z","date_formatted":{"ll":"Feb 23, 2021","L":"02/23/2021","MM-DD":"02-23"},"link":"2021/02/23/2021-02-23-01","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-02-23T03:12:14.127Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>\n<p>sync.Pool -&gt; 对象池，作用是缓存，对于经常使用的数据可以存在里面</p>\n</li>\n<li>\n<p>sync.Pool类型有两个方法Put和Get，写入和返回的都是interface{}类型的值</p>\n</li>\n<li>\n<p>sync.Pool类型还有一个New字段，当对象池里面没有东西的时候，会使用New字段创建一个，返回值是interface{}类型的值</p>\n</li>\n<li>\n<p>sync.Pool类型调用Get方法的时候，会移除获取到的值，如果调用了New字段获取的值，池子里不会有记录的</p>\n</li>\n<li>\n<p>sync包在初始化的时候，会向运行时系统注册一个函数，这个函数的功能就是清除所有已创建的临时对象池中的值，池清理函数</p>\n</li>\n<li>\n<p>一旦池清理函数被注册到了 Go 语言运行时系统，后者在每次即将执行垃圾回收时就都会执行前者</p>\n</li>\n<li>\n<p>sync包还有一个包级私有的全局变量，这个变量是所有临时对象池的汇总，类型是*sync.Pool的切片，叫做池汇总列表</p>\n</li>\n<li>\n<p>池清理函数在工作的时候，会遍历池汇总列表，对于每一个临时对象池，都会先将所有私有临时对象(private)和共享临时对象列表(shared)都置为nil，然后把池中的所有本地池列表都销毁掉，最后会把池汇总列表重置为空切片，这样就完成了临时对象的清除</p>\n</li>\n<li>\n<p>池汇总表中每一个池(sync.Pool)都对应一个P，所有在创建sync.Pool的时候，就会绑定一个P<br>\n<img src=\"../images/store/MIK-JWBuik.png\" alt=\"\"></p>\n</li>\n<li>\n<p>sync.Pool有三个字段(v1.13以前)：私有临时对象的字段private、共享临时对象列表字段shared、以及一个sync.Mutex</p>\n</li>\n<li>\n<p>一个临时对象池的Put方法或Get方法会获取到哪一个本地池，完全取决于调用它的代码所在的 goroutine 关联的那个 P</p>\n</li>\n<li>\n<p>临时对象池的Get方法在发现对应本地池的private字段未存有值时，也会去访问后者的shared字段。它会在互斥锁的保护下，试图把该共享临时对象列表中的最后一个元素值取出并作为结果(v1.13之后取消了单一sync.Pool的互斥锁，而用了全局的互斥锁)<br>\n<img src=\"../images/store/MIK-6T6lxD.png\" alt=\"\"></p>\n</li>\n</ol>\n","prev":{"title":"【Go语言核心36讲】34/35. 并发安全字典sync.Map","link":"2021/02/23/2021-02-23-02"},"next":{"title":"【Go语言核心36讲】32. context.Context类型","link":"2021/02/22/2021-02-22-01"},"plink":"https://terence.segofun.com/2021/02/23/2021-02-23-01/"}