{"title":"【Go语言核心36讲】11. 通道的高级玩法","date":"2021-02-17T13:49:13.000Z","date_formatted":{"ll":"Feb 17, 2021","L":"02/17/2021","MM-DD":"02-17"},"link":"2021/02/17/2021-02-17-10","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-02-17T15:39:36.859Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>单向通道<br>\n单向通道就是，只能发不能收，或者只能收不能发的通道。一个通道是双向的，还是单向的是由它的类型字面量体现的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var uselessChan &#x3D; make(chan&lt;- int, 1)    &#x2F;&#x2F; 单向入</span><br><span class=\"line\"></span><br><span class=\"line\">var uselessChan &#x3D; make(&lt;-chan, 1)    &#x2F;&#x2F; 单向收</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>单向通道有什么应用价值？</li>\n</ol>\n<ul>\n<li>单向通道最主要的用途就是约束其他代码的行为。</li>\n<li>主要作用就是在接口声明的时候，对于一些方法，我们在使用接口的时候，这个方法规定是单向通道，如果传入双向通道，那么会转换为单向通道，从而约束了代码</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Notifier interface &#123; SendInt(ch chan&lt;- int)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func SendInt(ch chan&lt;- int) &#123; </span><br><span class=\"line\">    ch &lt;- rand.Intn(1000)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">intChan1 :&#x3D; make(chan int, 3)</span><br><span class=\"line\">SendInt(intChan1)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>还可以在函数返回的时候，如果函数体内部返回的是双向，但是函数声明的时候，说返回值是单向的，那么在调用这个函数的时候，这个通道被获得后，就是单向的</li>\n<li>对于管道，用for range的时候，如果管道关闭了，那么自动结束for range，如果管道本身的值是nil，那么for会一直阻塞</li>\n<li>使用select的时候，如果通道关闭了，其实case也能接收到值，需要对第二个字段进行判断</li>\n</ul>\n<ol start=\"3\">\n<li>如果select 中有个通道不用了，如何屏蔽，可以赋值一个nil或一个非缓冲通道</li>\n</ol>\n","prev":{"title":"【Go语言核心36讲】12. 使用函数的正确姿势","link":"2021/02/17/2021-02-17-11"},"next":{"title":"【Go语言核心36讲】10. 通道的基本操作","link":"2021/02/17/2021-02-17-09"},"plink":"https://terence.segofun.com/2021/02/17/2021-02-17-10/"}