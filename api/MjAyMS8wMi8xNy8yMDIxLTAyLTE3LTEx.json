{"title":"【Go语言核心36讲】12. 使用函数的正确姿势","date":"2021-02-17T14:04:48.000Z","date_formatted":{"ll":"Feb 17, 2021","L":"02/17/2021","MM-DD":"02-17"},"link":"2021/02/17/2021-02-17-11","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2022-10-17T01:08:12.558Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\" target=\"_blank\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>函数是一等公民</li>\n</ol>\n<ul>\n<li>书写函数签名的方式与函数声明的是一致的，也就是函数的接口定义就是签名</li>\n<li>严格说来，函数的名称不能算作函数签名的一部分，只是个标识符</li>\n</ul>\n<ol start=\"2\">\n<li>高阶函数</li>\n</ol>\n<ul>\n<li>简单理解，函数的参数是个函数，返回的是一个函数，函数套函数</li>\n</ul>\n<ol start=\"3\">\n<li>闭包函数</li>\n</ol>\n<ul>\n<li>闭包可以简单理解为，在一个函数A作用域内定义一个新函数B，这个新函数B只能在当前函数A内使用<br>\n<img src=\"../images/store/61f3689a0023e83407ccae081cdd8108.png\" alt=\"\" loading=\"lazy\"></li>\n</ul>\n<ol start=\"4\">\n<li>函数参数传值影响</li>\n</ol>\n<ul>\n<li>所有传给函数的参数值都会被复制，函数在其内部使用的并不是参数值的原值，而是它的副本</li>\n<li>对于引用类型，比如：切片、字典、通道，像上面那样复制它们的值，只会拷贝它们本身而已，并不会拷贝它们引用的底层数据。也就是说，这时只是浅表复制，而不是深层复制</li>\n<li>以切片值为例，如此复制的时候，只是拷贝了它指向底层数组中某一个元素的指针，以及它的长度值和容量值，而它的底层数组并不会被拷贝</li>\n<li>理解引用类型和值类型，引用类型是数据结构底层是用的基础数据结构，表层只是对基础数据结构的地址的引用，值类型就是基础数据结构，其本身就是数据</li>\n<li>go的函数参数都是浅复制，引用类型的参数，就是复制引用基础数据结构的地址；值类型的参数，就是复制实实在在的值</li>\n</ul>\n","prev":{"title":"【Go语言核心36讲】13. 结构体及其方法的使用法门","link":"2021/02/17/2021-02-17-12"},"next":{"title":"【Go语言核心36讲】11. 通道的高级玩法","link":"2021/02/17/2021-02-17-10"},"plink":"https://terence.segofun.com/2021/02/17/2021-02-17-11/","reading_time":"507 words in 3 min"}