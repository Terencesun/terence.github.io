{"title":"【转载】Go 项目实战：实现一个 Redis(6) 之实现 pipeline 模式的 redis 客户端","date":"2021-03-13T16:20:11.000Z","date_formatted":{"ll":"Mar 14, 2021","L":"03/14/2021","MM-DD":"03-14"},"link":"2021/03/14/2021-03-13-07","comments":true,"tags":["golang实现redis"],"updated":"2022-10-17T01:08:12.567Z","content":"<blockquote>\n<p>本文由 <a href=\"http://ksria.com/simpread/\" target=\"_blank\">简悦 SimpRead</a> 转码， 原文地址 <a href=\"https://mp.weixin.qq.com/s?src=11%C3%97tamp=1615652605&amp;ver=2944&amp;signature=KJOxWs5l0IhTPhEsbi-S8YOPV5ADosbu9y56wc96yxqjr*mj7eUMgebfidgdTUlbUewmfT6RLHeWcUFgcT5jt8YlEW302JQHKZ4spQdEJ6q9oMOcQRdjISSXZTWNYhwN&amp;new=1\" target=\"_blank\">mp.weixin.qq.com</a></p>\n</blockquote>\n<p>本文是使用 golang 实现 redis 系列的第六篇， 将介绍如何实现一个 Pipeline 模式的 Redis 客户端。</p>\n<p>本文的完整代码在 <a href=\"https://github.com/HDT3213/godis/blob/master/src/redis/client/client.go\" target=\"_blank\">https://github.com/HDT3213/godis/blob/master/src/redis/client/client.go</a></p>\n<p>通常 TCP 客户端的通信模式都是阻塞式的: 客户端发送请求 -&gt; 等待服务端响应 -&gt; 发送下一个请求。因为需要等待网络传输数据，完成一次请求循环需要等待较多时间。</p>\n<p>我们能否不等待服务端响应直接发送下一条请求呢？答案是肯定的。</p>\n<p>TCP 作为全双工协议可以同时进行上行和下行通信，不必担心客户端和服务端同时发包会导致冲突。</p>\n<blockquote>\n<p>p.s. 打电话的时候两个人同时讲话就会冲突听不清，只能轮流讲。这种通信方式称为半双工。广播只能由电台发送到收音机不能反向传输，这种方式称为单工。</p>\n</blockquote>\n<p>我们为每一个 tcp 连接分配了一个 goroutine 可以保证先收到的请求先先回复。另一个方面，tcp 协议会保证数据流的有序性，同一个 tcp 连接上先发送的请求服务端先接收，先回复的响应客户端先收到。因此我们不必担心混淆响应所对应的请求。</p>\n<p>这种在服务端未响应时客户端继续向服务端发送请求的模式称为 Pipeline 模式。因为减少等待网络传输的时间，Pipeline 模式可以极大的提高吞吐量，减少所需使用的 tcp 链接数。</p>\n<p>pipeline 模式的 redis 客户端需要有两个后台协程程负责 tcp 通信，调用方通过 channel 向后台协程发送指令，并阻塞等待直到收到响应，这是一个典型的异步编程模式。</p>\n<p>我们先来定义 client 的结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Client struct &#123;</span><br><span class=\"line\">    conn        net.Conn &#x2F;&#x2F; 与服务端的 tcp 连接</span><br><span class=\"line\">    sendingReqs chan *Request &#x2F;&#x2F; 等待发送的请求</span><br><span class=\"line\">    waitingReqs chan *Request &#x2F;&#x2F; 等待服务器响应的请求</span><br><span class=\"line\">    ticker      *time.Ticker &#x2F;&#x2F; 用于触发心跳包的计时器</span><br><span class=\"line\">    addr        string</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx        context.Context</span><br><span class=\"line\">    cancelFunc context.CancelFunc</span><br><span class=\"line\">    writing    *sync.WaitGroup &#x2F;&#x2F; 有请求正在处理不能立即停止，用于实现 graceful shutdown</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Request struct &#123;</span><br><span class=\"line\">    id        uint64 &#x2F;&#x2F; 请求id</span><br><span class=\"line\">    args      [][]byte &#x2F;&#x2F; 上行参数</span><br><span class=\"line\">    reply     redis.Reply &#x2F;&#x2F; 收到的返回值</span><br><span class=\"line\">    heartbeat bool &#x2F;&#x2F; 标记是否是心跳请求</span><br><span class=\"line\">    waiting   *wait.Wait &#x2F;&#x2F; 调用协程发送请求后通过 waitgroup 等待请求异步处理完成</span><br><span class=\"line\">    err       error</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>调用者将请求发送给后台协程，并通过 wait group 等待异步处理完成:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (client *Client) Send(args [][]byte) redis.Reply &#123;</span><br><span class=\"line\">    request :&#x3D; &amp;Request&#123;</span><br><span class=\"line\">        args:      args,</span><br><span class=\"line\">        heartbeat: false,</span><br><span class=\"line\">        waiting:   &amp;wait.Wait&#123;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.waiting.Add(1)</span><br><span class=\"line\">    client.sendingReqs &lt;- request &#x2F;&#x2F; 将请求发往处理队列</span><br><span class=\"line\">    timeout :&#x3D; request.waiting.WaitWithTimeout(maxWait) &#x2F;&#x2F; 等待请求处理完成或者超时</span><br><span class=\"line\">    if timeout &#123;</span><br><span class=\"line\">        return reply.MakeErrReply(&quot;server time out&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if request.err !&#x3D; nil &#123;</span><br><span class=\"line\">        return reply.MakeErrReply(&quot;request failed: &quot; + err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return request.reply</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>client 的核心部分是后台的读写协程。先从写协程开始:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 写协程入口</span><br><span class=\"line\">func (client *Client) handleWrite() &#123;</span><br><span class=\"line\">loop:</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        select &#123;</span><br><span class=\"line\">        case req :&#x3D; &lt;-client.sendingReqs: &#x2F;&#x2F; 从 channel 中取出请求</span><br><span class=\"line\">            client.writing.Add(1) &#x2F;&#x2F; 未完成请求数+1</span><br><span class=\"line\">            client.doRequest(req) &#x2F;&#x2F; 发送请求</span><br><span class=\"line\">        case &lt;-client.ctx.Done():</span><br><span class=\"line\">            break loop</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 发送请求</span><br><span class=\"line\">func (client *Client) doRequest(req *Request) &#123;</span><br><span class=\"line\">    bytes :&#x3D; reply.MakeMultiBulkReply(req.args).ToBytes() &#x2F;&#x2F; 序列化</span><br><span class=\"line\">    _, err :&#x3D; client.conn.Write(bytes) &#x2F;&#x2F; 通过 tcp connection 发送</span><br><span class=\"line\">    i :&#x3D; 0</span><br><span class=\"line\">    for err !&#x3D; nil &amp;&amp; i &lt; 3 &#123; &#x2F;&#x2F; 失败重试</span><br><span class=\"line\">        err &#x3D; client.handleConnectionError(err)</span><br><span class=\"line\">        if err &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">            _, err &#x3D; client.conn.Write(bytes)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if err &#x3D;&#x3D; nil &#123;</span><br><span class=\"line\">        client.waitingReqs &lt;- req &#x2F;&#x2F; 将发送成功的请求放入等待响应的队列</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 发送失败</span><br><span class=\"line\">        req.err &#x3D; err</span><br><span class=\"line\">        req.waiting.Done() &#x2F;&#x2F; 结束调用者的等待</span><br><span class=\"line\">        client.writing.Done() &#x2F;&#x2F; 未完成请求数 -1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>读协程是我们熟悉的协议解析器模板, 不熟悉的朋友可以到实现 Redis 协议解析器了解更多。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 收到服务端的响应</span><br><span class=\"line\">func (client *Client) finishRequest(reply redis.Reply) &#123;</span><br><span class=\"line\">    request :&#x3D; &lt;-client.waitingReqs &#x2F;&#x2F; 取出等待响应的 request</span><br><span class=\"line\">    request.reply &#x3D; reply</span><br><span class=\"line\">    if request.waiting !&#x3D; nil &#123;</span><br><span class=\"line\">        request.waiting.Done() &#x2F;&#x2F; 结束调用者的等待</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    client.writing.Done() &#x2F;&#x2F; 未完成请求数-1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 读协程是个 RESP 协议解析器，不熟悉的朋友可以</span><br><span class=\"line\">func (client *Client) handleRead() error &#123;</span><br><span class=\"line\">    reader :&#x3D; bufio.NewReader(client.conn)</span><br><span class=\"line\">    downloading :&#x3D; false</span><br><span class=\"line\">    expectedArgsCount :&#x3D; 0</span><br><span class=\"line\">    receivedCount :&#x3D; 0</span><br><span class=\"line\">    msgType :&#x3D; byte(0) &#x2F;&#x2F; first char of msg</span><br><span class=\"line\">    var args [][]byte</span><br><span class=\"line\">    var fixedLen int64 &#x3D; 0</span><br><span class=\"line\">    var err error</span><br><span class=\"line\">    var msg []byte</span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; read line</span><br><span class=\"line\">        if fixedLen &#x3D;&#x3D; 0 &#123; &#x2F;&#x2F; read normal line</span><br><span class=\"line\">            msg, err &#x3D; reader.ReadBytes(&#39;\\n&#39;)</span><br><span class=\"line\">            if err !&#x3D; nil &#123;</span><br><span class=\"line\">                if err &#x3D;&#x3D; io.EOF || err &#x3D;&#x3D; io.ErrUnexpectedEOF &#123;</span><br><span class=\"line\">                    logger.Info(&quot;connection close&quot;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    logger.Warn(err)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                return errors.New(&quot;connection closed&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if len(msg) &#x3D;&#x3D; 0 || msg[len(msg)-2] !&#x3D; &#39;\\r&#39; &#123;</span><br><span class=\"line\">                return errors.New(&quot;protocol error&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123; &#x2F;&#x2F; read bulk line (binary safe)</span><br><span class=\"line\">            msg &#x3D; make([]byte, fixedLen+2)</span><br><span class=\"line\">            _, err &#x3D; io.ReadFull(reader, msg)</span><br><span class=\"line\">            if err !&#x3D; nil &#123;</span><br><span class=\"line\">                if err &#x3D;&#x3D; io.EOF || err &#x3D;&#x3D; io.ErrUnexpectedEOF &#123;</span><br><span class=\"line\">                    return errors.New(&quot;connection closed&quot;)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    return err</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if len(msg) &#x3D;&#x3D; 0 ||</span><br><span class=\"line\">                msg[len(msg)-2] !&#x3D; &#39;\\r&#39; ||</span><br><span class=\"line\">                msg[len(msg)-1] !&#x3D; &#39;\\n&#39; &#123;</span><br><span class=\"line\">                return errors.New(&quot;protocol error&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fixedLen &#x3D; 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; parse line</span><br><span class=\"line\">        if !downloading &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; receive new response</span><br><span class=\"line\">            if msg[0] &#x3D;&#x3D; &#39;*&#39; &#123; &#x2F;&#x2F; multi bulk response</span><br><span class=\"line\">                &#x2F;&#x2F; bulk multi msg</span><br><span class=\"line\">                expectedLine, err :&#x3D; strconv.ParseUint(string(msg[1:len(msg)-2]), 10, 32)</span><br><span class=\"line\">                if err !&#x3D; nil &#123;</span><br><span class=\"line\">                    return errors.New(&quot;protocol error: &quot; + err.Error())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if expectedLine &#x3D;&#x3D; 0 &#123;</span><br><span class=\"line\">                    client.finishRequest(&amp;reply.EmptyMultiBulkReply&#123;&#125;)</span><br><span class=\"line\">                &#125; else if expectedLine &gt; 0 &#123;</span><br><span class=\"line\">                    msgType &#x3D; msg[0]</span><br><span class=\"line\">                    downloading &#x3D; true</span><br><span class=\"line\">                    expectedArgsCount &#x3D; int(expectedLine)</span><br><span class=\"line\">                    receivedCount &#x3D; 0</span><br><span class=\"line\">                    args &#x3D; make([][]byte, expectedLine)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    return errors.New(&quot;protocol error&quot;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else if msg[0] &#x3D;&#x3D; &#39;$&#39; &#123; &#x2F;&#x2F; bulk response</span><br><span class=\"line\">                fixedLen, err &#x3D; strconv.ParseInt(string(msg[1:len(msg)-2]), 10, 64)</span><br><span class=\"line\">                if err !&#x3D; nil &#123;</span><br><span class=\"line\">                    return err</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if fixedLen &#x3D;&#x3D; -1 &#123; &#x2F;&#x2F; null bulk</span><br><span class=\"line\">                    client.finishRequest(&amp;reply.NullBulkReply&#123;&#125;)</span><br><span class=\"line\">                    fixedLen &#x3D; 0</span><br><span class=\"line\">                &#125; else if fixedLen &gt; 0 &#123;</span><br><span class=\"line\">                    msgType &#x3D; msg[0]</span><br><span class=\"line\">                    downloading &#x3D; true</span><br><span class=\"line\">                    expectedArgsCount &#x3D; 1</span><br><span class=\"line\">                    receivedCount &#x3D; 0</span><br><span class=\"line\">                    args &#x3D; make([][]byte, 1)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    return errors.New(&quot;protocol error&quot;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123; &#x2F;&#x2F; single line response</span><br><span class=\"line\">                str :&#x3D; strings.TrimSuffix(string(msg), &quot;\\n&quot;)</span><br><span class=\"line\">                str &#x3D; strings.TrimSuffix(str, &quot;\\r&quot;)</span><br><span class=\"line\">                var result redis.Reply</span><br><span class=\"line\">                switch msg[0] &#123;</span><br><span class=\"line\">                case &#39;+&#39;:</span><br><span class=\"line\">                    result &#x3D; reply.MakeStatusReply(str[1:])</span><br><span class=\"line\">                case &#39;-&#39;:</span><br><span class=\"line\">                    result &#x3D; reply.MakeErrReply(str[1:])</span><br><span class=\"line\">                case &#39;:&#39;:</span><br><span class=\"line\">                    val, err :&#x3D; strconv.ParseInt(str[1:], 10, 64)</span><br><span class=\"line\">                    if err !&#x3D; nil &#123;</span><br><span class=\"line\">                        return errors.New(&quot;protocol error&quot;)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    result &#x3D; reply.MakeIntReply(val)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                client.finishRequest(result)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; receive following part of a request</span><br><span class=\"line\">            line :&#x3D; msg[0 : len(msg)-2]</span><br><span class=\"line\">            if line[0] &#x3D;&#x3D; &#39;$&#39; &#123;</span><br><span class=\"line\">                fixedLen, err &#x3D; strconv.ParseInt(string(line[1:]), 10, 64)</span><br><span class=\"line\">                if err !&#x3D; nil &#123;</span><br><span class=\"line\">                    return err</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if fixedLen &lt;&#x3D; 0 &#123; &#x2F;&#x2F; null bulk in multi bulks</span><br><span class=\"line\">                    args[receivedCount] &#x3D; []byte&#123;&#125;</span><br><span class=\"line\">                    receivedCount++</span><br><span class=\"line\">                    fixedLen &#x3D; 0</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                args[receivedCount] &#x3D; line</span><br><span class=\"line\">                receivedCount++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; if sending finished</span><br><span class=\"line\">            if receivedCount &#x3D;&#x3D; expectedArgsCount &#123;</span><br><span class=\"line\">                downloading &#x3D; false &#x2F;&#x2F; finish downloading progress</span><br><span class=\"line\"></span><br><span class=\"line\">                if msgType &#x3D;&#x3D; &#39;*&#39; &#123;</span><br><span class=\"line\">                    reply :&#x3D; reply.MakeMultiBulkReply(args)</span><br><span class=\"line\">                    client.finishRequest(reply)</span><br><span class=\"line\">                &#125; else if msgType &#x3D;&#x3D; &#39;$&#39; &#123;</span><br><span class=\"line\">                    reply :&#x3D; reply.MakeBulkReply(args[0])</span><br><span class=\"line\">                    client.finishRequest(reply)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#x2F;&#x2F; finish reply</span><br><span class=\"line\">                expectedArgsCount &#x3D; 0</span><br><span class=\"line\">                receivedCount &#x3D; 0</span><br><span class=\"line\">                args &#x3D; nil</span><br><span class=\"line\">                msgType &#x3D; byte(0)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后编写 client 的构造器和启动异步协程的代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func MakeClient(addr string) (*Client, error) &#123;</span><br><span class=\"line\">    conn, err :&#x3D; net.Dial(&quot;tcp&quot;, addr)</span><br><span class=\"line\">    if err !&#x3D; nil &#123;</span><br><span class=\"line\">        return nil, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx, cancel :&#x3D; context.WithCancel(context.Background())</span><br><span class=\"line\">    return &amp;Client&#123;</span><br><span class=\"line\">        addr:        addr,</span><br><span class=\"line\">        conn:        conn,</span><br><span class=\"line\">        sendingReqs: make(chan *Request, chanSize),</span><br><span class=\"line\">        waitingReqs: make(chan *Request, chanSize),</span><br><span class=\"line\">        ctx:         ctx,</span><br><span class=\"line\">        cancelFunc:  cancel,</span><br><span class=\"line\">        writing:     &amp;sync.WaitGroup&#123;&#125;,</span><br><span class=\"line\">    &#125;, nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (client *Client) Start() &#123;</span><br><span class=\"line\">    client.ticker &#x3D; time.NewTicker(10 * time.Second)</span><br><span class=\"line\">    go client.handleWrite()</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        err :&#x3D; client.handleRead()</span><br><span class=\"line\">        logger.Warn(err)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    go client.heartbeat()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>关闭 client 的时候记得等待请求完成:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (client *Client) Close() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 先阻止新请求进入队列</span><br><span class=\"line\">    close(client.sendingReqs)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 等待处理中的请求完成</span><br><span class=\"line\">    client.writing.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 释放资源</span><br><span class=\"line\">    _ &#x3D; client.conn.Close() &#x2F;&#x2F; 关闭与服务端的连接，连接关闭后读协程会退出</span><br><span class=\"line\">    client.cancelFunc() &#x2F;&#x2F; 使用 context 关闭读协程</span><br><span class=\"line\">    close(client.waitingReqs) &#x2F;&#x2F; 关闭队列</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试一下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TestClient(t *testing.T) &#123;</span><br><span class=\"line\">    client, err :&#x3D; MakeClient(&quot;localhost:6379&quot;)</span><br><span class=\"line\">    if err !&#x3D; nil &#123;</span><br><span class=\"line\">        t.Error(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    client.Start()</span><br><span class=\"line\"></span><br><span class=\"line\">    result &#x3D; client.Send([][]byte&#123;</span><br><span class=\"line\">        []byte(&quot;SET&quot;),</span><br><span class=\"line\">        []byte(&quot;a&quot;),</span><br><span class=\"line\">        []byte(&quot;a&quot;),</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    if statusRet, ok :&#x3D; result.(*reply.StatusReply); ok &#123;</span><br><span class=\"line\">        if statusRet.Status !&#x3D; &quot;OK&quot; &#123;</span><br><span class=\"line\">            t.Error(&quot;&#96;set&#96; failed, result: &quot; + statusRet.Status)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    result &#x3D; client.Send([][]byte&#123;</span><br><span class=\"line\">        []byte(&quot;GET&quot;),</span><br><span class=\"line\">        []byte(&quot;a&quot;),</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    if bulkRet, ok :&#x3D; result.(*reply.BulkReply); ok &#123;</span><br><span class=\"line\">        if string(bulkRet.Arg) !&#x3D; &quot;a&quot; &#123;</span><br><span class=\"line\">            t.Error(&quot;&#96;get&#96; failed, result: &quot; + string(bulkRet.Arg))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者：finley</p>\n<p>出处：<a href=\"https://www.cnblogs.com/Finley/p/14028402.html\" target=\"_blank\">https://www.cnblogs.com/Finley/p/14028402.html</a></p>\n<p>版权：本作品采用「署名 - 非商业性使用 - 相同方式共享 4.0 国际」许可协议进行许可。</p>\n</blockquote>\n<p><strong>推荐阅读</strong></p>\n<p><strong><a href=\"http://mp.weixin.qq.com/s?__biz=MzAxMTA4Njc0OQ==&amp;mid=2651444101&amp;idx=2&amp;sn=6cd575925514ede560466d217fd64853&amp;chksm=80bb0d77b7cc846170c6ff64097adee700b9a0f5b1c1100dc6cac7ab138d5dbb0327087fad8a&amp;scene=21#wechat_redirect\" target=\"_blank\">Go 项目实战：实现一个 Redis(5) 之使用跳表实现 SortedSet</a></strong></p>\n","prev":{"title":"【转载】Go 项目实战：实现一个 Redis(7) 之集群与一致性 Hash","link":"2021/03/14/2021-03-13-08"},"next":{"title":"【转载】Go 项目实战：实现一个 Redis(5) 之使用跳表实现 SortedSet","link":"2021/03/14/2021-03-13-06"},"plink":"https://terence.segofun.com/2021/03/14/2021-03-13-07/","reading_time":"2078 words in 14 min"}