{"title":"【Go语言项目开发】07 工作流设计","date":"2021-07-26T08:14:08.000Z","date_formatted":{"ll":"Jul 26, 2021","L":"07/26/2021","MM-DD":"07-26"},"link":"2021/07/26/2021-07-26-1","comments":true,"tags":["golang"],"updated":"2022-10-17T01:08:12.570Z","content":"<h2 id=\"【go语言项目开发】07-工作流设计\">【Go语言项目开发】07 工作流设计<a title=\"#【go语言项目开发】07-工作流设计\" href=\"#【go语言项目开发】07-工作流设计\"></a></h2>\n<hr>\n<ol>\n<li>Git开发时，4种常用的工作流</li>\n</ol>\n<ul>\n<li>集中式工作流</li>\n<li>功能分支工作流</li>\n<li>Git Flow工作流</li>\n<li>Forking工作流</li>\n</ul>\n<ol start=\"2\">\n<li>集中式工作流<br>\n<img src=\"../images/store/FhTYkW.png\" alt=\"\" loading=\"lazy\"></li>\n</ol>\n<ul>\n<li>每位开发者都在本地有一份远程仓库的拷贝：本地仓库。A、B、C 在本地的 master 分支开发完代码之后，将修改后的代码 commit 到远程仓库，如果有冲突就先解决本地的冲突再提交</li>\n<li>不同开发人员的提交日志混杂在一起，难以定位问题。如果同时开发多个功能，不同功能同时往 master 分支合并，代码之间也会相互影响，从而产生代码冲突</li>\n</ul>\n<ol start=\"3\">\n<li>功能分支工作流<br>\n<img src=\"../images/store/vn1aL2.png\" alt=\"\" loading=\"lazy\"></li>\n</ol>\n<ul>\n<li>在开发新功能时，基于 master 分支新建一个功能分支，在功能分支上进行开发，而不是直接在本地的 master 分支开发，开发完成之后合并到 master 分支</li>\n<li>在合并到 master 分支时，需要提交 PR（pull request），而不是直接将代码 merge 到 master 分支。PR 流程不仅可以把分支代码提供给团队其他开发人员进行 CR（Code Review），还可以在 PR 页面讨论代码</li>\n<li>无法给分支分配明确的目的，不利于团队配合。它适合用在开发团队相对固定、规模较小的项目中</li>\n</ul>\n<ol start=\"4\">\n<li>Git Flow 工作流<br>\n<img src=\"../images/store/Kd8RfZ.png\" alt=\"\" loading=\"lazy\"></li>\n</ol>\n<ul>\n<li>Master/Devlop 分支<br>\n<img src=\"../images/store/6pY6SC.png\" alt=\"\" loading=\"lazy\"></li>\n<li>Feature 分支<br>\n<img src=\"../images/store/DTwiNq.png\" alt=\"\" loading=\"lazy\"></li>\n<li>Release 分支<br>\n<img src=\"../images/store/u47YLc.png\" alt=\"\" loading=\"lazy\"></li>\n<li>Hotfix 分支<br>\n<img src=\"../images/store/xHVqKw.png\" alt=\"\" loading=\"lazy\"></li>\n<li>Git Flow 工作流比较适合开发团队相对固定，规模较大的项目</li>\n</ul>\n<ol start=\"5\">\n<li>Forking 工作流<br>\n<img src=\"../images/store/eRhFDq.png\" alt=\"\" loading=\"lazy\"></li>\n</ol>\n<ul>\n<li>Forking 工作流中，项目远程仓库和开发者远程仓库完全独立，开发者通过提交 Pull Request 的方式给远程仓库贡献代码，项目维护者选择性地接受任何开发者的提交，通过这种方式，可以避免授予开发者项目远程仓库的权限，从而提高项目远程仓库的安全性，这也使得任意开发者都可以参与项目的开发</li>\n<li>Forking 工作流适用于三种场景：（1）开源项目中；（2）开发者有衍生出自己的衍生版的需求；（3）开发者不固定，可能是任意一个能访问到项目的开发者</li>\n</ul>\n<ol start=\"6\">\n<li>总结：<br>\n<img src=\"../images/store/bMkrDQ.png\" alt=\"\" loading=\"lazy\"></li>\n</ol>\n","prev":{"title":"【Go语言项目开发】08/09 研发流程设计","link":"2021/07/28/2021-07-28"},"next":{"title":"【Go语言项目开发】06 目录结构设计","link":"2021/07/26/2021-07-26"},"plink":"https://terence.segofun.com/2021/07/26/2021-07-26-1/","toc":[{"id":"【go语言项目开发】07-工作流设计","title":"【Go语言项目开发】07 工作流设计","index":"1"}],"reading_time":"623 words in 4 min"}