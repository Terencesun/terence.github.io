{"title":"【Go语言项目开发】06 目录结构设计","date":"2021-07-26T08:14:03.000Z","date_formatted":{"ll":"Jul 26, 2021","L":"07/26/2021","MM-DD":"07-26"},"link":"2021/07/26/2021-07-26","comments":true,"tags":["golang"],"updated":"2022-10-17T01:08:12.570Z","content":"<h2 id=\"【go语言项目开发】06-目录结构设计\">【Go语言项目开发】06 目录结构设计<a title=\"#【go语言项目开发】06-目录结构设计\" href=\"#【go语言项目开发】06-目录结构设计\"></a></h2>\n<hr>\n<p><strong>如何规范目录？</strong></p>\n<ul>\n<li>命名清晰：目录命名要清晰、简洁，不要太长，也不要太短，目录名要能清晰地表达出该目录实现的功能，并且目录名最好用单数</li>\n<li>功能明确：一个目录所要实现的功能应该是明确的、并且在整个项目目录中具有很高的辨识度</li>\n<li>全面性：目录结构应该尽可能全面地包含研发过程中需要的功能，例如文档、脚本、源码管理、API 实现、工具、第三方包、测试、编译产物等</li>\n<li>可预测性：项目规模一定是从小到大的，所以一个好的目录结构应该能够在项目变大时，仍然保持之前的目录结构</li>\n<li>可扩展性：每个目录下存放了同类的功能，在项目变大时，这些目录应该可以存放更多同类功能</li>\n</ul>\n<p>根据功能，我们可以将目录结构分为结构化目录结构和平铺式目录结构两种</p>\n<ul>\n<li>平铺式目录结构</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls glog&#x2F;</span><br><span class=\"line\">glog_file.go  glog.go  glog_test.go  LICENSE  README</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结构化目录结构<br>\n<img src=\"../images/store/j4qYku.png\" alt=\"\" loading=\"lazy\"></li>\n</ul>\n<p><strong>Go 应用：主要存放前后端代码</strong></p>\n<ul>\n<li>/web -&gt; 前端代码存放目录，主要用来存放 Web 静态资源，服务端模板和单页应用（SPAs）。</li>\n<li>/cmd -&gt; 一个项目有很多组件，可以把组件 main 函数所在的文件夹统一放在/cmd 目录下，也就是如果这个文件夹里面有main函数，就放在这里</li>\n<li>/internal -&gt; 存放私有应用和库代码。如果一些代码，你不希望在其他应用和库中被导入，可以将这部分代码放在/internal 目录下</li>\n</ul>\n<p>在引入其它项目 internal 下的包时，Go 语言会在编译时报错</p>>\n- /internal/apiserver -> 该目录中存放真实的应用代码\n- /internal/pkg -> 存放项目内可共享，项目外不共享的包。这些包提供了比较基础、通用的功能，例如工具、错误码、用户验证等功能\n- /pkg -> 该目录中存放可以被外部应用使用的代码库，其他项目可以直接通过 import 导入这里的代码。所以，我们在将代码库放入该目录时一定要慎重\n- /vendor -> 项目依赖，可通过 go mod vendor 创建。需要注意的是，如果是一个 Go 库，不要提交 vendor 依赖包\n- /third_party -> 外部帮助工具，分支代码或其他第三方应用（例如 Swagger UI）。比如我们 fork 了一个第三方 go 包，并做了一些小的改动，我们可以放在目录 /third_party/forked 下。一方面可以很清楚的知道该包是 fork 第三方的，另一方面又能够方便地和 upstream 同步\n<p><strong>Go 应用：主要存放测试相关的文件和代码</strong></p>\n<ul>\n<li>/test -&gt; 用于存放其他外部测试应用和测试数据，Go 也会忽略以“.”或 “_” 开头的目录或文件。这样在命名测试数据目录方面，可以具有更大的灵活性</li>\n</ul>\n<p><strong>Go 应用：存放跟应用部署相关的文件</strong></p>\n<ul>\n<li>/configs -&gt; 这个目录用来配置文件模板或默认配置，可以在这里存放 confd 或 consul-template 模板文件，配置中不能携带敏感信息，这些敏感信息，我们可以用占位符来替代</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1    </span><br><span class=\"line\">user:    </span><br><span class=\"line\">  username: $&#123;CONFIG_USER_USERNAME&#125; # iam 用户名    </span><br><span class=\"line\">  password: $&#123;CONFIG_USER_PASSWORD&#125; # iam 密码</span><br></pre></td></tr></table></figure>\n<ul>\n<li>/deployments -&gt; 用来存放 Iaas、PaaS 系统和容器编排部署配置和模板（Docker-Compose，Kubernetes/Helm，Mesos，Terraform，Bosh）。在一些项目，特别是用 Kubernetes 部署的项目中，这个目录可能命名为 deploy</li>\n<li>/init -&gt; 存放初始化系统（systemd，upstart，sysv）和进程管理配置文件（runit，supervisord）</li>\n</ul>\n<p><strong>项目管理：存放用来管理 Go 项目的各类文件</strong></p>\n<ul>\n<li>/makefile -&gt; 虽然 Makefile 是一个很老的项目管理工具，但它仍然是最优秀的项目管理工具。所以，一个 Go 项目在其根目录下应该有一个 Makefile 工具，用来对项目进行管理，Makefile 通常用来执行静态代码检查、单元测试、编译等功能</li>\n</ul>\n<p>静态代码检查(lint)：推荐用 golangci-lint。</p>\n<p>单元测试(test)：运行 go test ./... </p>\n<p>编译(build)：编译源码，支持不同的平台，不同的 CPU 架构 </p>\n<p>镜像打包和发布(image/image.push)：现在的系统比较推荐用 Docker/Kubernetes 进行部署，所以一般也要有镜像构建功能 </p>\n<p>清理（clean）:清理临时文件或者编译后的产物 </p>\n<p>代码生成（gen）：比如要编译生成 protobuf pb.go 文件 </p>\n<p>部署（deploy，可选）：一键部署功能，方便测试 </p>\n<p>发布（release）：发布功能，比如：发布到 Docker Hub、github 等 </p>\n<p>帮助（help）:告诉 Makefile 有哪些功能，如何执行这些功能 </p>\n<p>版权声明（add-copyright）：如果是开源项目，可能需要在每个文件中添加版权头，这可以通过 Makefile 来添加 </p>\n<p>API 文档（swagger）：如果使用 swagger 来生成 API 文档，这可以通过 Makefile 来生成 </p>\n<p>直接执行 make 时，执行如下各项 format -> lint -> test -> build，如果是有代码生成的操作，还可能需要首先生成代码 gen -> format -> lint -> test -> build</p>\n- /scripts -> 该目录主要用来存放脚本文件，实现构建、安装、分析等不同功能\n- /scripts/make-rules -> 用来存放 makefile 文件，实现 /Makefile 文件中的各个功能\n- /scripts/lib -> shell 库，用来存放 shell 脚本\n- /scripts/install -> 如果项目支持自动化部署，可以将自动化部署脚本放在此目录下。如果部署脚本简单，也可以直接放在 /scripts 目录下\n<p>shell 脚本中的函数名，建议采用语义化的命名方式，例如 iam::log::info 这种语义化的命名方式</p>\n- /build -> 这里存放安装包和持续集成相关的文件\n- /build/package -> 存放容器（Docker）、系统（deb, rpm, pkg）的包配置和脚本\n- /build/ci -> 存放 CI（travis，circle，drone）的配置文件和脚本\n- /build/docker -> 存放子项目各个组件的 Dockerfile 文件\n- /tools -> 存放这个项目的支持工具。这些工具可导入来自 /pkg 和 /internal 目录的代码\n- /githooks -> Git 钩子。比如，我们可以将 commit-msg 存放在该目录\n- /assets -> 项目使用的其他资源 (图片、CSS、JavaScript 等)\n- /website -> 如果你不使用 GitHub 页面，那么可以在这里放置项目网站相关的数据\n<p><strong>文档：主要存放项目的各类文档</strong></p>\n<ul>\n<li>/README.md -&gt; 项目的 README 文件一般包含了项目的介绍、功能、快速安装和使用指引、详细的文档链接以及开发指引等。有时候 README 文档会比较长，为了能够快速定位到所需内容，需要添加 markdown toc 索引</li>\n<li>/docs -&gt; 存放设计文档、开发文档和用户文档等（除了 godoc 生成的文档）</li>\n<li>/docs/devel -&gt; 存放开发文档、hack 文档等</li>\n<li>/docs/guide -&gt; 存放用户手册，安装、quickstart、产品文档等，分为中文文档和英文文档</li>\n<li>/docs/images -&gt; 存放图片文件</li>\n<li><a href=\"http://CONTRIBUTING.md\">CONTRIBUTING.md</a> -&gt; 如果是一个开源就绪的项目，最好还要有一个 <a href=\"http://CONTRIBUTING.md\">CONTRIBUTING.md</a> 文件，用来说明如何贡献代码，如何开源协同等等</li>\n<li>/api -&gt; 存放的是当前项目对外提供的各种不同类型的 API 接口定义文件，其中可能包含类似 /api/protobuf-spec、/api/thrift-spec、/api/http-spec、openapi、swagger 的目录</li>\n<li>/LICENSE -&gt; 版权文件可以是私有的，也可以是开源的</li>\n<li>/CHANGELOG -&gt; 当项目有更新时，为了方便了解当前版本的更新内容或者历史更新内容，需要将更新记录存放到 CHANGELOG 目录</li>\n<li>/examples -&gt; 存放应用程序或者公共包的示例代码</li>\n</ul>\n<p><strong>不建议的目录</strong></p>\n<ul>\n<li>/src -&gt; 一些开发语言，例如 Java 项目中会有 src 目录。在 Java 项目中， src 目录是一种常见的模式，但在 Go 项目中，不建议使用 src 目录</li>\n<li>/model -&gt; 在 Go 项目里，不建议将类型定义统一存放在 model 目录中，这样做一方面不符合 Go 按功能拆分的设计哲学，建议将类型定义放在它被使用的模块中</li>\n<li>/xxs -&gt; 在 Go 项目中，要避免使用带复数的目录或者包。建议统一使用单数</li>\n</ul>\n<p><strong>小建议</strong></p>\n<ul>\n<li>对于小型项目可以先考虑包含cmd、pkg、internal 3个目录，其他目录后面按需创建</li>\n<li>在设计目录结构时，一些空目录无法提交到 Git 仓库中，但我们又想将这个空目录上传到 Git 仓库中，以保留目录结构。这时候，可以在空目录下加一个 .keep 文件</li>\n</ul>\n","prev":{"title":"【Go语言项目开发】07 工作流设计","link":"2021/07/26/2021-07-26-1"},"next":{"title":"常用的哈希算法比较","link":"2021/04/08/2021-04-08"},"plink":"https://terence.segofun.com/2021/07/26/2021-07-26/","toc":[{"id":"【go语言项目开发】06-目录结构设计","title":"【Go语言项目开发】06 目录结构设计","index":"1"}],"reading_time":"2201 words in 15 min"}