{"title":"【Go语言核心36讲】46. 访问网络服务","date":"2021-03-12T15:46:52.000Z","date_formatted":{"ll":"Mar 12, 2021","L":"03/12/2021","MM-DD":"03-12"},"link":"2021/03/12/2021-03-12-02","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-03-12T16:02:48.940Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>socket与IPC</li>\n</ol>\n<ul>\n<li>socket常被翻译为套接字，它应该算是网络编程世界中最为核心的知识之一</li>\n<li>所谓 socket，是一种 IPC 方法</li>\n<li>IPC 这个概念（或者说规范）主要定义的是多个进程之间，相互通信的方法</li>\n<li>系统信号（signal）、管道（pipe）、套接字 （socket）、文件锁（file lock）、消息队列（message queue）、信号灯（semaphore，有的地方也称之为信号量）等。现存的主流操作系统大都对 IPC 提供了强有力的支持，尤其是 socket</li>\n<li>os/signal包里面就是针对系统信号的API</li>\n<li>与其他的 IPC 方法不同，利用 socket 进行通信的进程，可以不局限在同一台计算机当中</li>\n<li>支持 socket 的操作系统一般都会对外提供一套 API</li>\n<li>跑在它们之上的应用程序利用这套 API，就可以与互联网上的另一台计算机中的程序、同一台计算机中的其他程序，甚至同一个程序中的其他线程进行通信</li>\n<li>在 Linux 操作系统中，用于创建 socket 实例的 API，就是由一个名为socket的系统调用代表</li>\n<li>所谓的系统调用，你可以理解为特殊的 C 语言函数。它们是连接应用程序和操作系统内核的桥梁，也是应用程序使用操作系统功能的唯一渠道</li>\n<li>在 Go 语言标准库的syscall代码包中，有一个与这个socket系统调用相对应的函数</li>\n<li>Go 语言的net代码包中的很多程序实体，都会直接或间接地使用到syscall.Socket函数</li>\n</ul>\n<ol start=\"2\">\n<li>net.Dial介绍</li>\n</ol>\n<ul>\n<li>net.Dial函数会接受两个参数，分别名为network和address</li>\n<li>参数network常用的可选值一共有 9 个，分别代表了程序底层创建的 socket 实例可使用的不同通信协议</li>\n<li>“tcp”：代表 TCP 协议，其基于的 IP 协议的版本根据参数address的值自适应。</li>\n<li>“tcp4”：代表基于 IP 协议第四版的 TCP 协议。</li>\n<li>“tcp6”：代表基于 IP 协议第六版的 TCP 协议。</li>\n<li>“udp”：代表 UDP 协议，其基于的 IP 协议的版本根据参数address的值自适应。</li>\n<li>“udp4”：代表基于 IP 协议第四版的 UDP 协议。</li>\n<li>“udp6”：代表基于 IP 协议第六版的 UDP 协议。</li>\n<li>“unix”：代表 Unix 通信域下的一种内部 socket 协议，以 SOCK_STREAM 为 socket 类型。</li>\n<li>“unixgram”：代表 Unix 通信域下的一种内部 socket 协议，以 SOCK_DGRAM 为 socket 类型。</li>\n<li>“unixpacket”：代表 Unix 通信域下的一种内部 socket 协议，以 SOCK_SEQPACKET 为 socket 类型</li>\n</ul>\n<ol start=\"3\">\n<li>syscall.Socket函数相关</li>\n</ol>\n<ul>\n<li>Socket 的通信域主要有这样几个可选项：IPv4 域、IPv6 域和 Unix 域</li>\n<li>syscall.Socket 三个参数,domain,type, proto<br>\n<img src=\"../images/store/I0fYdR.png\" alt=\"\"></li>\n<li>socket类型(四种，前两个常用)：SOCK_DGRAM、SOCK_STREAM、SOCK_SEQPACKET以及SOCK_RAW</li>\n<li>UDP是基于SOCK_DGRAM</li>\n<li>TCP是基于SOCK_STREAM</li>\n<li>只要明确指定了前两个参数的值，我们就无需再去确定第三个参数值了，一般把它置为0就可以了。这时，内核程序会自行选择最合适的协议</li>\n<li>比如，当前两个参数值分别为syscall.AF_INET和syscall.SOCK_DGRAM的时候，内核程序会选择 UDP 作为协议。又比如，在前两个参数值分别为syscall.AF_INET6和syscall.SOCK_STREAM时，内核程序可能会选择 TCP 作为协议</li>\n</ul>\n","prev":{"title":"【Go语言核心36讲】47. 基于HTTP协议的网络服务","link":"2021/03/13/2021-03-13-01"},"next":{"title":"【Go语言核心36讲】44/45. 使用os包中的API","link":"2021/03/12/2021-03-12-01"},"plink":"https://terence.segofun.com/2021/03/12/2021-03-12-02/"}