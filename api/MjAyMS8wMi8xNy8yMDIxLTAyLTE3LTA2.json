{"title":"【Go语言核心36讲】7. 数组和切片","date":"2021-02-17T12:49:09.000Z","date_formatted":{"ll":"Feb 17, 2021","L":"02/17/2021","MM-DD":"02-17"},"link":"2021/02/17/2021-02-17-06","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-02-17T15:39:36.855Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>数组类型和切片类型</li>\n</ol>\n<ul>\n<li>数组类型的长度是固定的，切片类型的长度不是固定，切片类型的底层是数组</li>\n<li>数组的容量和长度相等，切片的容量和长度不一定相等</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s3 :&#x3D; []int&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class=\"line\">s4 :&#x3D; s3[3:6]</span><br><span class=\"line\">fmt.Printf(&quot;The length of s4: %d\\n&quot;, len(s4))</span><br><span class=\"line\">fmt.Printf(&quot;The capacity of s4: %d\\n&quot;, cap(s4))</span><br><span class=\"line\">fmt.Printf(&quot;The value of s4: %d\\n&quot;, s4)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; s4是基于s3来的，s4和s3共用一个底层数组</span><br><span class=\"line\">&#x2F;&#x2F; s4截取的是4, 5, 6，所以长度是3</span><br><span class=\"line\">&#x2F;&#x2F; 但是对于容量就不一样了，底层数组总长度是8，由于容量的扩展都是向右的，那么</span><br><span class=\"line\">&#x2F;&#x2F; s4截取的底层数组窗口大小是3，向右扩展的话，还有两个位置，那么s4的容量就是3+2&#x3D;5</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>切片容量增长估算</li>\n</ol>\n<ul>\n<li>当原切片的长度&gt;=1024时，go会以原容量的1.25倍做为新容量的基准</li>\n<li>新容量基准会被调整(不断与1.25相乘)，直到结果不小于原长度与要追加的元素数量之和</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>在无需扩容时，append函数返回的是指向原底层数组的原切片，而在需要扩容时，append函数返回的是指向新底层数组的新切片</p>\n</li>\n<li>\n<p>make 是专门用来创建 slice、map、channel 的值的。它返回的是被创建的值，并且立即可用</p>\n</li>\n<li>\n<p>new 是申请一小块内存并标记它是用来存放某个值的。它返回的是指向这块内存的指针，而且这块内存并不会被初始化。或者说，对于一个引用类型的值，那块内存虽然已经有了，但还没法用</p>\n</li>\n<li>\n<p>对于引用类型的值，不要用 new，能用 make 就用 make，不能用 make 就用复合字面量来创建</p>\n</li>\n</ol>\n","prev":{"title":"【Go语言核心36讲】8. container包中的那些容器","link":"2021/02/17/2021-02-17-07"},"next":{"title":"【Go语言核心36讲】4/5/6. 程序实体的那些事儿","link":"2021/02/17/2021-02-17-05"},"plink":"https://terence.segofun.com/2021/02/17/2021-02-17-06/"}