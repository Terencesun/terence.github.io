{"title":"【Go语言核心36讲】9. 字典的操作和约束","date":"2021-02-17T13:27:55.000Z","date_formatted":{"ll":"Feb 17, 2021","L":"02/17/2021","MM-DD":"02-17"},"link":"2021/02/17/2021-02-17-08","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2022-10-17T01:08:12.557Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\" target=\"_blank\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>\n<p>go的字典类型是哈希表的特定实现，在这个实现中，键和值的不同在于键的类型受限，元素可以任意类型</p>\n</li>\n<li>\n<p>字典类型中的键是通过映射实现的，映射函数叫做哈希函数</p>\n</li>\n<li>\n<p>一个哈希表会持有一定数量的桶（bucket），我们也可以叫它哈希桶，这些哈希桶会均匀地储存其所属哈希表收纳的键 - 元素对</p>\n</li>\n<li>\n<p>哈希表会先用这个键哈希值的低几位去定位到一个哈希桶，然后再去这个哈希桶中，查找这个键</p>\n</li>\n<li>\n<p>go的字典的键类型不能是函数类型、字典类型和切片类型</p>\n</li>\n<li>\n<p>能作为键类型的值必须能支持判等操作</p>\n</li>\n<li>\n<p>如果键的类型是数组类型，那么还要确保该类型的元素类型不是函数类型、字典类型或切片类型</p>\n</li>\n<li>\n<p>如果键的类型是结构体类型，那么还要保证其中字段的类型的合法性。无论不合法的类型被埋藏得有多深，比如map[[1][2][3][]string]int，Go 语言编译器都会把它揪出来</p>\n</li>\n<li>\n<p>优先考虑作为键的值类型(宽度越小的类型，单个值需要占用的字节数): 数值类型和指针类型，尽量不要使用高级类型，字符串做键的话，越短越快</p>\n</li>\n<li>\n<p>优先选用数值类型和指针类型，通常情况下类型的宽度越小越好。如果非要选择字符串类型的话，最好对键值的长度进行额外的约束</p>\n</li>\n<li>\n<p>由于字典是引用类型，所以当我们仅声明而不初始化一个字典类型的变量的时候，它的值会是nil</p>\n</li>\n<li>\n<p>除了添加键 - 元素对，我们在一个值为nil的字典上做任何操作都不会引起错误。当我们试图在一个值为nil的字典中添加键 - 元素对的时候，Go 语言的运行时系统就会立即抛出一个 panic</p>\n</li>\n<li>\n<p>go的字典类型不是并发安全的，使用时记得配套使用锁</p>\n</li>\n</ol>\n","prev":{"title":"【Go语言核心36讲】10. 通道的基本操作","link":"2021/02/17/2021-02-17-09"},"next":{"title":"【Go语言核心36讲】8. container包中的那些容器","link":"2021/02/17/2021-02-17-07"},"plink":"https://terence.segofun.com/2021/02/17/2021-02-17-08/","reading_time":"634 words in 4 min"}