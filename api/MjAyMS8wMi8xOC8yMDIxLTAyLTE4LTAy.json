{"title":"【Go语言核心36讲】18. if语句、for语句和switch语句","date":"2021-02-18T13:09:25.000Z","date_formatted":{"ll":"Feb 18, 2021","L":"02/18/2021","MM-DD":"02-18"},"link":"2021/02/18/2021-02-18-02","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-02-19T01:11:22.484Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>range的内容</li>\n</ol>\n<ul>\n<li>range表达式只会在for语句开始执行时被求值一次，无论后边会有多少次迭代</li>\n<li>range表达式的求值结果会被复制，也就是说，被迭代的对象是range表达式结果值的副本而不是原值</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>switch后边的表达式和case中的表达式的结果的类型是有判等要求的，只有类型相同的值之间才有可能被允许进行判等操作</p>\n</li>\n<li>\n<p>单纯的1+2这种无类型常量，结构都是默认类型，比如1+3就是int，3.14就是float64</p>\n</li>\n<li>\n<p>如果case表达式中子表达式的结果值是无类型的常量，那么它的类型会被自动地转换为switch表达式的结果类型<br>\n<img src=\"../images/store/clipboard.png\" alt=\"\"></p>\n</li>\n<li>\n<p>同一条switch语句中的所有case表达式的子表达式的结果值不能重复，不过好在这只是对于由字面量直接表示的子表达式而言的</p>\n</li>\n<li>\n<p>普通case子句的编写顺序很重要，最上边的case子句中的子表达式总是会被最先求值，在判等的时候顺序也是这样</p>\n</li>\n</ol>\n","prev":{"title":"【Go语言核心36讲】19/20. 错误处理","link":"2021/02/18/2021-02-18-03"},"next":{"title":"【Go语言核心36讲】16/17. go语句及其执行规则","link":"2021/02/18/2021-02-18-01"},"plink":"https://terence.segofun.com/2021/02/18/2021-02-18-02/"}