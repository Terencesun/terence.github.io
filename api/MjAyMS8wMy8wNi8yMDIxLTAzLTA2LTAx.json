{"title":"【Go语言核心36讲】36. unicode与字符编码","date":"2021-03-06T12:36:58.000Z","date_formatted":{"ll":"Mar 6, 2021","L":"03/06/2021","MM-DD":"03-06"},"link":"2021/03/06/2021-03-06-01","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-03-07T06:17:31.624Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>\n<p>Go的代码由Unicode组成的，其中UTF-8是Unicode编码规范中的一种编码格式</p>\n</li>\n<li>\n<p>Ascii编码(American Standard Code for Information Interchange)，美国信息交换标准代码，后边ISO定义为ISO 646标准</p>\n</li>\n<li>\n<p>Ascii -&gt; 单字节(Byte)的二进制数来编码一个字符</p>\n</li>\n<li>\n<p>标准的Ascii编码用一个字节的最高比特位(bit)作为奇偶校验位，除了标准的Ascii编码，还有扩展的Ascii编码，它是用一个字节的最高比特位表示字符</p>\n</li>\n<li>\n<p>Unicode为世界上现存的所有自然语言中的每一个字符，都设定了一个唯一的整数，这个整数通常是十六进制的</p>\n</li>\n<li>\n<p>Unicode编码规范以Ascii编码集为出发点</p>\n</li>\n<li>\n<p>Unicode通常使用十六进制表示法来表示Unicode代码点的整数值，并使用“U+”作为前缀，比如&quot;a&quot;的Unicode代码点是U+0061</p>\n</li>\n<li>\n<p>在Unicode编码规范中，一个字符能且只能由它对应的那个代码点表示，一一对应</p>\n</li>\n<li>\n<p>Unicode编码规范提供了三种不同的编码格式，UTF-8, UTF-16和UTF-32</p>\n</li>\n<li>\n<p>UTF - UCS Transformation Format - UCS -&gt; Universal Character Set</p>\n</li>\n<li>\n<p>UTF代表的是字符和字节序列之间转换的方式</p>\n</li>\n<li>\n<p>UTF-8，表示它会以8个bit作为一个编码单元，Ascii编码的代码点数值范围<a href=\"0%E5%88%B0127\">0x00, 0x7f</a>，Ascii编码也是8bit作为一个字节，这就让UTF-8和Ascii完全兼容了</p>\n</li>\n<li>\n<p>UTF-8是一种可变宽的编码方案，可以用多个字节(n*8 bit)来表示某个字符，最多使用四个字节(32bit)，对于英文字符，一个字节就可以表示，对于汉字字符，需要三个字节</p>\n</li>\n<li>\n<p>注意标准的Ascii字符集没有中文，Ascii不能表示中文字符，GBK编码是以Ascii为基础的，代码点整数值小于127用Ascii，大于127就用GB标准，然鹅，这个GBK是个噩梦</p>\n</li>\n<li>\n<p>一个字节等于8位二进制，4位二进制等于一位十六进制，所以2位十六进制等于一个字节</p>\n</li>\n<li>\n<p>string类型由一系列相对应的unicode代码点的urf-8编码值来表达</p>\n</li>\n<li>\n<p>string可以有两种表达，一个是rune[]，一个是byte[]</p>\n</li>\n<li>\n<p>rune 实际上是int32的别名，rune[]每一个元素都是一个unicode代码点，注意，这个代码点是10进制表示的(因为rune是int32，这个是10进制的整数)，英文字符和中文字符都是一个代码点，但是英文字符由一个byte组成，中文字符由三个byte组成</p>\n</li>\n<li>\n<p>对于一个多字节的 UTF-8 编码值来说，我们可以把它当做一个整体转换为单一的整数，也可以先把它拆成字节序列，再把每个字节分别转换为一个整数，从而得到多个整数<br>\n<img src=\"../images/store/MIK-VqZcVy.png\" alt=\"\"></p>\n</li>\n<li>\n<p>一个string类型的值会由若干个 Unicode 字符组成，每个 Unicode 字符都可以由一个rune类型的值来承载，每个rune类型值可以拆成一个或多个byte类型的值</p>\n</li>\n<li>\n<p>一个string类型的值在底层就是一个能够表达若干个 UTF-8 编码值的字节序列</p>\n</li>\n<li>\n<p>range和for 对于 string类型使用的时候，如果不处理string，range会使用unicode字符作为vol，但是索引会使用字节作为index</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TestString(t *testing.T) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstr :&#x3D; &quot;Go爱好者&quot;</span><br><span class=\"line\">\tfor i, c :&#x3D; range str &#123;</span><br><span class=\"line\">\t\tfmt.Printf(&quot;%d: %q [% x]\\n&quot;, i, c, []byte(string(c)))   &#x2F;&#x2F; 索引是以byte[]，值是以rune[]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"23\">\n<li>for语句可以逐一地迭代出字符串值里的每个 Unicode 字符。但是，相邻的 Unicode 字符的索引值并不一定是连续的。这取决于前一个 Unicode 字符是否为单字节字符</li>\n</ol>\n","prev":{"title":"【Go语言核心36讲】37. strings包与字符串操作","link":"2021/03/07/2021-03-07-01"},"next":{"title":"【nodejs】动态加载require数据","link":"2021/02/27/2021-02-27-01"},"plink":"https://terence.segofun.com/2021/03/06/2021-03-06-01/"}