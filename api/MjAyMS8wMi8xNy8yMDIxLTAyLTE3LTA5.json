{"title":"【Go语言核心36讲】10. 通道的基本操作","date":"2021-02-17T13:44:59.000Z","date_formatted":{"ll":"Feb 17, 2021","L":"02/17/2021","MM-DD":"02-17"},"link":"2021/02/17/2021-02-17-09","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2022-10-17T01:08:12.557Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\" target=\"_blank\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>概念</li>\n</ol>\n<ul>\n<li>一个通道相当于一个先进先出（FIFO）的队列。也就是说，通道中的各个元素值都是严格地按照发送的顺序排列的，先被发送通道的元素值一定会先被接收。元素值的发送和接收都需要用到操作符&lt;-。我们也可以叫它接送操作符。一个左尖括号紧接着一个减号形象地代表了元素值的传输方向</li>\n<li>当容量为0时，我们可以称通道为非缓冲通道，也就是不带缓冲的通道。而当容量大于0时，我们可以称为缓冲通道，也就是带有缓冲的通道</li>\n</ul>\n<ol start=\"2\">\n<li>通道的基本特性</li>\n</ol>\n<ul>\n<li>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的</li>\n<li>发送操作和接收操作中对元素值的处理都是不可分割的</li>\n<li>发送操作在完全完成之前会被阻塞。接收操作也是如此</li>\n</ul>\n<ol start=\"3\">\n<li>通道基本特性的理解</li>\n</ol>\n<ul>\n<li>通道是一个线程安全的，也是原子性的，当一个线程或协程操作通道(写入或读取)，其他线程或协程会等待</li>\n</ul>\n<ol start=\"4\">\n<li>通道的基本特性细节</li>\n</ol>\n<ul>\n<li>元素值从外界进入通道时会被复制。更具体地说，进入通道的并不是在接收操作符右边的那个元素值，而是它的副本</li>\n<li>一般情况下，发送操作包括了“复制元素值”和“放置副本到通道内部”这两个步骤，在这两个步骤完全完成之前，发起这个发送操作的那句代码会一直阻塞在那里。也就是说，在它之后的代码不会有执行的机会，直到这句代码的阻塞解除</li>\n</ul>\n<ol start=\"5\">\n<li>\n<p>通道的分类：缓冲/非缓冲/nil</p>\n</li>\n<li>\n<p>对于nil通道，对它操作，永远都是阻塞的，所以使用通道之前一定要初始化</p>\n</li>\n<li>\n<p>对于关闭的通道进行写入或关闭操作，会panic</p>\n</li>\n</ol>\n","prev":{"title":"【Go语言核心36讲】11. 通道的高级玩法","link":"2021/02/17/2021-02-17-10"},"next":{"title":"【Go语言核心36讲】9. 字典的操作和约束","link":"2021/02/17/2021-02-17-08"},"plink":"https://terence.segofun.com/2021/02/17/2021-02-17-09/","reading_time":"596 words in 4 min"}