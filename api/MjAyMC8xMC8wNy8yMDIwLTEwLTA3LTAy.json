{"title":"【go】ioutil包详解","date":"2020-10-07T08:37:47.000Z","date_formatted":{"ll":"Oct 7, 2020","L":"10/07/2020","MM-DD":"10-07"},"link":"2020/10/07/2020-10-07-02","comments":true,"tags":["golang","language"],"updated":"2022-10-17T01:08:12.553Z","content":"<h2 id=\"ioutil包详解\">ioutil包详解<a title=\"#ioutil包详解\" href=\"#ioutil包详解\"></a></h2>\n<hr>\n<h3 id=\"1.-前言\">1. 前言<a title=\"#1.-前言\" href=\"#1.-前言\"></a></h3>\n<p>ioutil包是golang标准库中的，用于提供了一些常用、方便的IO操作函数</p>\n<h3 id=\"2.-函数列表\">2. 函数列表<a title=\"#2.-函数列表\" href=\"#2.-函数列表\"></a></h3>\n<ul>\n<li><a href=\"#ReadAll\">ReadAll</a></li>\n<li><a href=\"#ReadDir\">ReadDir</a></li>\n<li><a href=\"#ReadFile\">ReadFile</a></li>\n<li><a href=\"#WriteFile\">WriteFile</a></li>\n<li><a href=\"#TempDir\">TempDir</a></li>\n<li><a href=\"#TempFile\">TempFile</a></li>\n<li><a href=\"#NopCloser\">NopCloser</a></li>\n</ul>\n<h3 id=\"3.-函数使用\">3. 函数使用<a title=\"#3.-函数使用\" href=\"#3.-函数使用\"></a></h3>\n<ul>\n<li><span id=\"ReadAll\">ReadAll</span></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; ReadAll</span><br><span class=\"line\">&#x2F;&#x2F; 从io.Reader中一次读取所有数据</span><br><span class=\"line\">&#x2F;&#x2F; func ReadAll(r io.Reader) ([]byte, error)</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"> </span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&#x2F;ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    file, _ :&#x3D; os.Open(&#96;file_path&#96;)</span><br><span class=\"line\">    con, _ :&#x3D; ioutil.ReadAll(file)</span><br><span class=\"line\">    fmt.Println(string(con))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><span id=\"ReadDir\">ReadDir</span></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; ReadDir</span><br><span class=\"line\">&#x2F;&#x2F; 它读取目录并返回排好序的文件和子目录名</span><br><span class=\"line\">&#x2F;&#x2F; func ReadDir(dirname string) ([]os.FileInfo, error)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"> </span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&#x2F;ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    fileInfos, err :&#x3D; ioutil.ReadDir(&quot;d:&quot;)</span><br><span class=\"line\">    if err !&#x3D; nil &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    for _, info :&#x3D; range fileInfos &#123;</span><br><span class=\"line\">        fmt.Println(info.Name(),info.IsDir(),info.Mode())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><span id=\"ReadFile\">ReadFile</span></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; ReadFile</span><br><span class=\"line\">&#x2F;&#x2F;  从filename指定的文件中读取数据并返回文件的内容。成功的调用返回的err为nil而非EOF。因为本函数定义为读取整个文件，它不会将读取返回的EOF视为应报告的错误</span><br><span class=\"line\">&#x2F;&#x2F; func ReadFile(filename string) ([]byte, error)</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"> </span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&#x2F;ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    con,err :&#x3D; ioutil.ReadFile(&#96;filepath&#96;)</span><br><span class=\"line\">    fmt.Println(string(con),err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><span id=\"WriteFile\">WriteFile</span></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; WriteFile</span><br><span class=\"line\">&#x2F;&#x2F; 函数向filename指定的文件中写入数据。如果文件不存在将按给出的权限创建文件，否则在写入数据之前清空文件</span><br><span class=\"line\">&#x2F;&#x2F; func WriteFile(filename string, data []byte, perm os.FileMode) error</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"> </span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&#x2F;ioutil&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    con :&#x3D; []byte(&quot;this is text&quot;)</span><br><span class=\"line\">    err :&#x3D; ioutil.WriteFile(&quot;d:&#x2F;a.txt&quot;,con,0666)</span><br><span class=\"line\">    if err!&#x3D;nil&#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><span id=\"TempDir\">TempDir</span></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; TempDir</span><br><span class=\"line\">&#x2F;&#x2F; 在dir目录里创建一个新的、使用prfix作为前缀的临时文件夹，并返回文件夹的路径。如果dir是空字符串，TempDir使用默认用于临时文件的目录（参见os.TempDir函数）</span><br><span class=\"line\">&#x2F;&#x2F;  不同程序同时调用该函数会创建不同的临时目录，调用本函数的程序有责任在不需要临时文件夹时摧毁它</span><br><span class=\"line\">&#x2F;&#x2F; func TempDir(dir, prefix string) (name string, err error)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 代码放在下面</span><br></pre></td></tr></table></figure>\n<ul>\n<li><span id=\"TempFile\">TempFile</span></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; TempFile</span><br><span class=\"line\">&#x2F;&#x2F; 在dir目录下创建一个新的、使用prefix为前缀的临时文件，以读写模式打开该文件并返回os.File指针。如果dir是空字符串，TempFile使用默认用于临时文件的目录（参见os.TempDir函数）</span><br><span class=\"line\">&#x2F;&#x2F; 不同程序同时调用该函数会创建不同的临时文件，调用本函数的程序有责任在不需要临时文件时摧毁它</span><br><span class=\"line\">&#x2F;&#x2F; func TempFile(dir, prefix string) (f *os.File, err error)</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"> </span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;io&#x2F;ioutil&quot;</span><br><span class=\"line\">    &quot;os&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    work, err :&#x3D; ioutil.TempDir(&quot;&quot;, &quot;go-build&quot;)</span><br><span class=\"line\">    fmt.Println(work,err)</span><br><span class=\"line\"> </span><br><span class=\"line\">    f1, err :&#x3D; ioutil.TempFile(work, &quot;gofmt&quot;)</span><br><span class=\"line\">    fmt.Println(f1.Name(),err)</span><br><span class=\"line\"> </span><br><span class=\"line\">    defer func() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 用完临时文件需要销毁</span><br><span class=\"line\">        f1.Close()</span><br><span class=\"line\">        os.Remove(f1.Name())</span><br><span class=\"line\">        os.Remove(work)</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><span id=\"NopCloser\">NopCloser</span></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; NopCloser</span><br><span class=\"line\">&#x2F;&#x2F; NopCloser用一个无操作的Close方法包装r返回一个ReadCloser接口</span><br><span class=\"line\">&#x2F;&#x2F; func NopCloser(r io.Reader) io.ReadCloser</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 没什么用这个函数</span><br></pre></td></tr></table></figure>\n","prev":{"title":"【go练习】一个用户信息管理程序","link":"2020/10/08/2020-10-08-01"},"next":{"title":"【go】Goroutine的GPM模型","link":"2020/10/07/2020-10-07-01"},"plink":"https://terence.segofun.com/2020/10/07/2020-10-07-02/","toc":[{"id":"ioutil包详解","title":"ioutil包详解","index":"1","children":[{"id":"1.-前言","title":"1. 前言","index":"1.1"},{"id":"2.-函数列表","title":"2. 函数列表","index":"1.2"},{"id":"3.-函数使用","title":"3. 函数使用","index":"1.3"}]}],"reading_time":"779 words in 5 min"}