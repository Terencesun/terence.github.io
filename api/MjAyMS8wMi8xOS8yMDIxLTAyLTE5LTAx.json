{"title":"【Go语言核心36讲】23/24. 测试的基本规则和流程","date":"2021-02-19T12:54:54.000Z","date_formatted":{"ll":"Feb 19, 2021","L":"02/19/2021","MM-DD":"02-19"},"link":"2021/02/19/2021-02-19-01","comments":true,"tags":["Go语言核心36讲","极客时间"],"updated":"2021-02-20T08:58:47.301Z","content":"<blockquote>\n<p>Hi, 如果你看到这篇文章，那么我是根据极客时间的郝林老师的Go语言核心36讲记录的笔记<br>\n如果对Go语言核心36讲感兴趣的，请支持原作者<br>\n地址：<a href=\"https://time.geekbang.org/column/intro/112\">https://time.geekbang.org/column/intro/112</a></p>\n</blockquote>\n<ol>\n<li>\n<p>Go 程序编写三类测试，即：功能测试（test）、基准测试（benchmark，也称性能测试），以及示例测试（example）</p>\n</li>\n<li>\n<p>测试源码文件的主名称应该以被测源码文件的主名称为前导，并且必须以“_test”为后缀。例如，如果被测源码文件的名称为 demo52.go，那么针对它的测试源码文件的名称就应该是 demo52_test.go。</p>\n</li>\n<li>\n<p>Go 语言对测试函数的名称和签名都有哪些规定？</p>\n</li>\n</ol>\n<ul>\n<li>对于功能测试函数来说，其名称必须以Test为前缀，并且参数列表中只应有一个*testing.T类型的参数声明</li>\n<li>对于性能测试函数来说，其名称必须以Benchmark为前缀，并且唯一参数的类型必须是*testing.B类型的</li>\n<li>对于示例测试函数来说，其名称必须以Example为前缀，但对函数的参数列表没有强制规定</li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>go test 命令运行后，测试文件会有缓存，可以执行go clean -cache清除缓存或go clean -testcache也可以</p>\n</li>\n<li>\n<p>设置环境变量GODEBUG的值也可以稍稍地改变 go 命令的缓存行为</p>\n</li>\n<li>\n<p>设置值为gocacheverify=1将会导致 go 命令绕过任何的缓存数据</p>\n</li>\n<li>\n<p>t.fail() 就是说该测试失败，但会继续进行其他测试</p>\n</li>\n<li>\n<p>t.failNow() 就是说测试立刻失败，不会继续进行其他测试</p>\n</li>\n<li>\n<p>t.Error()、t.Errorf() 可以打印失败测试日志</p>\n</li>\n<li>\n<p>t.Error() 相当于运行t.Log()和t.Fail()</p>\n</li>\n<li>\n<p>t.Fatal方法和t.Fatalf方法，打印失败错误日志之后立刻终止当前测试函数的执行并宣告测试失败</p>\n</li>\n<li>\n<p>性能测试</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go test -bench&#x3D;. -run&#x3D;^$ puzzlers&#x2F;article20&#x2F;q3</span><br><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: puzzlers&#x2F;article20&#x2F;q3</span><br><span class=\"line\">BenchmarkGetPrimes-8      500000       2314 ns&#x2F;op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok   puzzlers&#x2F;article20&#x2F;q3 1.192s</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-run=^$，这个标记用于表明需要执行哪些功能测试函数，这同样也是以函数名称为依据的。该标记的值^$意味着：只执行名称为空的功能测试函数，换句话说，不执行任何功能测试函数</li>\n<li>BenchmarkGetPrimes-8被称为单个性能测试的名称，它表示命令执行了性能测试函数BenchmarkGetPrimes，并且当时所用的最大 P 数量为8</li>\n<li>最大 P 数量相当于可以同时运行 goroutine 的逻辑 CPU 的最大个数。这里的逻辑 CPU，也可以被称为 CPU 核心，但它并不等同于计算机中真正的 CPU 核心，只是 Go 语言运行时系统内部的一个概念，代表着它同时运行 goroutine 的能力</li>\n<li>，一台计算机的 CPU 核心的个数，意味着它能在同一时刻执行多少条程序指令，代表着它并行处理程序指令的能力</li>\n<li>go test命令在执行性能测试函数的时候会给它一个正整数，若该测试函数的唯一参数的名称为b，则该正整数就由b.N代表。我们应该在测试函数中配合着编写代码，比如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i :&#x3D; 0; i &lt; b.N; i++ &#123;</span><br><span class=\"line\"> GetPrimes(1000)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我在一个会迭代b.N次的循环中调用了GetPrimes函数，并给予它参数值1000。go test命令会先尝试把b.N设置为1，然后执行测试函数。如果测试函数的执行时间没有超过上限，此上限默认为 1 秒，那么命令就会改大b.N的值，然后再次执行测试函数，如此往复，直到这个时间大于或等于上限为止。</p>\n<p><img src=\"../images/store/hzzieO.png\" alt=\"\" class=\"φbs\"></p>\n","prev":{"title":"【Go语言核心36讲】25. 更多的测试手法","link":"2021/02/20/2021-02-20-01"},"next":{"title":"【Go语言核心36讲】21/22. panic函数、recover函数以及defer语句","link":"2021/02/18/2021-02-18-04"},"plink":"https://terence.segofun.com/2021/02/19/2021-02-19-01/"}